Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![Advanced HTML and CSS](/assets/badge-html-
css-91bc8d9c7ebb2e2f73eeb302c38a92d9ba6f182301dbd1868d7198fcc8376aeb.svg)
](/paths/full-stack-javascript/courses/advanced-html-and-css)

#  Transitions

[

##  Advanced HTML and CSS Course

](https://www.theodinproject.com/paths/full-stack-javascript/courses/advanced-
html-and-css)

### Introduction

It’s time to dive into the exciting world of CSS transitions and give your
HTML elements some slick transformations!

### Learning outcomes

  * What a CSS transition is and when to use it
  * Know what CSS properties are animatable and which ones are not
  * How to make sure your transitions are smooth and performant

### Transitions

CSS transitions let you animate a change from an element’s initial state to an
end state. Think of an ordinary button element with a white background. When
your mouse is away from the button, it’s just sitting there. Boring. Then when
you hover your mouse cursor over the button the background color smoothly
transitions from white to grey to black over a period of time. This is a CSS
transition. Have a look at the Codepen below to see one in action.

See the Pen [ CSS Transition
(longhand)](https://codepen.io/TheOdinProjectExamples/pen/eYGmYRm) by
TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

When your mouse cursor is away from the button, the button is in the initial
state. When you hover over it you introduce the end state, the hover state,
causing the transition of the color smoothly fading from white to black to
occur.

This was achieved using the `transition` property, which is actually a
shorthand property for `transition-property`, `transition-duration`,
`transition-timing-function` and `transition-delay`.

    
    
    button {
      /* ... other CSS properties ... */
      transition-property: background-color;
      transition-duration: 1s;
      transition-timing-function: ease-out;
      transition-delay: 0.25s;
    }
    

  * `transition-property` \- This determines what CSS property will be transitioned. In this case it is the `background-color`.

  * `transition-duration` \- This determines the duration that the transition will occur over. In this case the color change will gradually happen over 1 second.

  * `transition-timing-function` \- This lets us change the speed of the transition over the course of its duration. Here it will `ease-out`, meaning the color change will be faster at the start than at the end of the transition.

  * `transition-delay` \- This determines the delay at which the transition will start. In this case, the color change starts a quarter of a second after the cursor rests on the button.

The shorthand property looks like this:

    
    
    button {
      /* ... other CSS properties ... */
      background-color: white;
      transition: background-color 1s ease-out 0.25s;
    }
    
    button:hover {
      background-color: black;
    }
    

The above transition will occur when the user hovers their mouse over the
button as indicated by the `:hover` pseudo-class. In addition to `:hover`, or
any of the other pseudo-classes, you can also trigger transitions by adding or
removing classes with JavaScript. For example, clicking a button could append
the “open” class to a dropdown menu, which would trigger the opening
transition.

### Performance

Generally, keeping your CSS transitions performant will not be an issue.
However there are a couple of things you need to keep in mind.

The first is the “stacking context”. Basically, a stacking context is formed
when certain element scenarios are in place. A relevant scenario for us would
be to transition a `transform` property like below:

    
    
    div {
      width: 100px;
      height: 100px;
      transition: transform 2s 1s; 
    }
    
    div:hover {
      transform: rotate(180deg);
    }
    

This has created a stacking context. If we were to make a bunch more stacking
contexts through various other means then, when it comes to rendering our
initial transform, we would repaint not only our `div` element but also
**every element that is stacked on top of it in the stack context**. If left
unchecked, this can cause your once buttery-smooth transition to become slow
and rough.

The second thing to keep in mind is that you should keep your animations to
only affecting `opacity` and `transform` if you want absolute best performance
for animations on your web page. Yes, our first example above only carried out
a simple `background-color` change, but even that was an expensive operation
in itself.

What’s important is that you have a solid understanding of these concepts and
can apply them when necessary because hey, if you need to turn a button into a
rainbow when it’s hovered over, you better be able to transition that rainbow!

### Assignment

  1. Read the MDN article for [using CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions), including the links in the [Defining transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions#defining_transitions) section of the article. Make sure you code along with any examples to become familiar with the syntax.
  2. Read the MDN article about [the stacking context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context) for a deeper understanding.
  3. Learn some handy hints on how to create performant CSS animations by reading [this article](https://web.dev/animations-guide/) and check out the link it provides to [CSS Triggers](https://web.archive.org/web/20220727225220/https://csstriggers.com/) to see how an animatable CSS property may affect others. Look at the difference between the `background-color` and `transform` properties, for example.
  4. Learn how to catch and debug repaint issues with this great article from [Dzhavat Ushev](https://dzhavat.github.io/2021/02/18/debugging-layout-repaint-issues-triggered-by-css-transition.html).

### Knowledge check

This section contains questions for you to check your understanding of this
lesson. If you’re having trouble answering the questions below on your own,
review the material above to find the answer.

  * [Are all CSS properties animatable?](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties)
  * [What are the long and short-hand notations for transitions?](https://developer.mozilla.org/en-US/docs/Web/CSS/transition)
  * [What is the stacking context?](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context)
  * [Why do you need to keep an eye on repaints?](https://dzhavat.github.io/2021/02/18/debugging-layout-repaint-issues-triggered-by-css-transition.html)

### Additional resources

This section contains helpful links to other content. It isn’t required, so
consider it supplemental for if you need to dive deeper into something.

  * Up until now, you have only controlled the speed of your transitions with the help of keyword values like `ease` and `ease-in`. However, CSS allows you to define your own timing functions with the help of timing functions like `steps` and `cubic-bezier`. In specific, [the `cubic-bezier` function](https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function#cubic_b%C3%A9zier_easing_function) is widely used. 
    * [This article](https://blog.maximeheckel.com/posts/cubic-bezier-from-math-to-motion/) discusses `cubic-bezier` functions in detail. While it has a ton of mathematics, you do not need to delve deep into it apart from a creating a basic idea about their purpose.
    * You can play around with the [CSS Cubic Bezier Generator](https://www.cssportal.com/css-cubic-bezier-generator/) to not only view how the `cubic-bezier` value works in an editable demo, but also to compare the different `transition-timing-function` values side by side.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/advanced_html_css/animation/transitions.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-advanced-html-
and-css-
transitions&template=suggestion.yaml&title=Transitions%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/advanced-html-and-css) [Sign in to track
progress](/sign_in) [ Next lessonGo to next lesson Next Lesson
](/lessons/node-path-advanced-html-and-css-keyframes)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

