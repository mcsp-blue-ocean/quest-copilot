Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![JavaScript](/assets/badge-
javascript-626af7075a7914bc4f30bd941268ed883785c3fb29b3e9d023eb5ab6450353bb.svg)
](/paths/full-stack-javascript/courses/javascript)

#  Project: Restaurant Page

[

##  JavaScript Course

](https://www.theodinproject.com/paths/full-stack-
javascript/courses/javascript)

### Introduction

Let’s use what we’ve learned and take a chance to continue practicing DOM
manipulation by dynamically rendering a simple restaurant homepage! By the
end, we are going to be using JavaScript alone to generate the entire contents
of the website!

**Note: DOM elements should be created using JavaScript but styling can be
done in a separate CSS file.**

### Assignment

  1. Start the project the same way you began the webpack tutorial project. 
    1. run `npm init` in your project directory to generate a `package.json` file.

    2. run `npm install webpack webpack-cli --save-dev` to install webpack to the node_modules directory of your project.

      * Quick tip: the `node_modules` folder can get _really_ big. It is customary to add a `.gitignore` file to your project so that you don’t have to sync the contents of `node_modules` to github. The dependencies that are stored there can be installed from your package.json by running `npm install`, so you don’t need to sync them.
    3. Create a `src` and `dist` directory with the following contents:

      1. an `index.js` file in `src`

      2. an `index.html` file in `dist`. Go ahead and link the `main.js` file in a script tag. `main.js` is the file that will be generated by webpack.

      3. create a `webpack.config.js` file that looks just like our file from the [tutorial](https://webpack.js.org/guides/getting-started/#using-a-configuration).

  2. Set up an HTML skeleton inside of `dist/index.html` with single `<div id="content">`.

  3. Inside of `src/index.js` write a simple console.log or alert statement and then run `npx webpack`. Load up `dist/index.html` in a browser to make sure everything is working correctly.

    * Quick tip #2: if you run `npx webpack --watch` you will not have to rerun webpack every time you make a change.
  4. Create a bare-bones homepage for a restaurant. Include an image, headline, and some copy about how wonderful the restaurant is. It’s okay to hard-code these into the HTML for now just to see how they look on the page.

  5. Now remove those elements from the HTML (so leave only the `<html>`, `<body>`, and `<div id="content">` tags) and instead create them by using JavaScript only, e.g. by appending each new element to `div#content` once the page is first loaded. Since we’re all set up to write our code in multiple files, let’s write this initial page-load function inside of its own module and then import and call it inside of `index.js`.

  6. Next, set up your restaurant site to use tabbed browsing to access the Contact and Menu pages. [Look at the behavior of this student solution](https://eckben.github.io/bearysBreakfastBar/) for visual inspiration.

    1. Put the contents of each ‘tab’ inside of its own module. Each module will export a function that creates a div element, adds the appropriate content and styles to that element and then appends it to the DOM.

    2. Write the tab-switching logic inside of `index.js`. You should have event listeners for each tab that wipes out the current contents and then runs the correct ‘tab module’ to populate it again.

  7. If you are using GitHub pages to host your completed page you need to do a tiny bit more work to get it to show up. After running `webpack` the full bundled version of your site is available in the `dist` folder, but GH pages is looking for an index.html in the root directory of your project.

    1. Simply follow the instructions on [this gist](https://gist.github.com/cobyism/4730490). EZPZ! 
      * To prevent having to copy and paste the same lengthy git command each time, you can instead create an npm script to do the work for you! 
        * Inside your project’s `package.json` file, within the `scripts` section, add an additional entry named something of your choosing and paste in the command from the above gist surrounded by quotation marks. Follow the formatting of the already added `test` script.
        * For Example:   
` "scripts": { "YourScriptName": "git subtree push --prefix dist origin gh-
pages" }`

        * Now each time you need to update your project’s live preview, you can simply `npm run <YourScriptName>` in your project’s terminal.
        * To learn more about this, here’s a short tutorial video on [Node Package Manager Scripts](https://www.youtube.com/watch?v=REdzp64dijs).
    2. Recall that the **source branch** for GitHub Pages is set in your repository’s settings.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/javascript/organizing_your_javascript_code/project_restaurant_page.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-javascript-
restaurant-
page&template=suggestion.yaml&title=Restaurant+Page%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

Only logged in users can view user submissions for this project

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/javascript) [Sign in to track progress](/sign_in) [ Next
lessonGo to next lesson Next Lesson ](/lessons/node-path-javascript-oop-
principles)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

