Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![React](/assets/badge-
react-d347c579ca6df9afc0ef4127bb4fe6dc4002be06cb241f4d70b37c412f56cec2.svg)
](/paths/full-stack-javascript/courses/react)

#  Fetching Data In React

[

##  React Course

](https://www.theodinproject.com/paths/full-stack-javascript/courses/react)

### Introduction

Up to this point, we have been using React to build client-side applications
with interactive user interfaces, but what if we want to fetch data from the
internet? In order to create full-fledged web applications, we need some way
to get data from external sources and dynamically display it.

In this lesson, we’ll explore the ins and outs of fetching data in React,
starting with the basics of making API calls, managing component state, and
handling asynchronous operations using JavaScript’s `fetch` function. You’ve
already performed data fetching in earlier projects, so some material covered
in the lesson will be familiar to you. Revision doesn’t hurt!

### Lesson overview

This section contains a general overview of topics that you will learn in this
lesson.

  * Understand how to make fetch requests in React components.
  * Catching and handling errors.
  * Lifting requests up the component hierarchy.

### A basic fetch request

Before we dive into the specifics of fetching data in React, let’s briefly
revisit how we can use the fetch API to get data from a server.

    
    
    const image = document.querySelector("img");
    fetch("https://jsonplaceholder.typicode.com/photos", {
      mode: "cors",
    })
      .then((response) => response.json())
      .then((response) => {
        image.src = response[0].url;
      })
      .catch((error) => console.error(error));
    

We’re making a request to the JSONPlaceholder API to retrieve an image, and
then setting that URL to the src of an `<img>` element.

### Using fetch in React components

Now, let’s take a look at how we can incorporate `fetch` into a similar React
component. One common use case is to fetch data from an API when a component
mounts, so that the data can be displayed on screen.

Whenever a component needs to make a request as it renders, it’s often best to
wrap that `fetch` inside of an effect.

    
    
    import { useEffect, useState } from "react";
    
    const Image = () => {
      const [imageURL, setImageURL] = useState(null);
    
      useEffect(() => {
        fetch("https://jsonplaceholder.typicode.com/photos", { mode: "cors" })
          .then((response) => response.json())
          .then((response) => setImageURL(response[0].url))
          .catch((error) => console.error(error));
      }, []);
    
      return (
        imageURL && (
          <>
            <h1>An image</h1>
            <img src={imageURL} alt={"placeholder text"} />
          </>
        )
      );
    };
    
    export default Image;
    

`useState` lets us add the `imageURL` state, whereas `useEffect` allows us to
perform side effects. In this case, the side effect is fetching data from an
external API. Since we need to fetch the data only once when the component
mounts, we pass an empty dependency array.

### Handling errors

Working over the network is inherently unreliable. The API you’re making a
request to might be down, there could be network connectivity issues, or the
response you receive could contain errors. A multitude of things can go wrong,
and if you don’t preemptively plan for errors, your website can break or
appear unresponsive to users.

To simulate a network error, scroll up to the previous code snippet and change
the `fetch` URL to something random. The page will remain a blank white
screen, without giving the user any indication that the page has finished
loading or that there was an error.

To fix this, we need to check for _something_ before Image component returns
JSX. We’ll call it: `error`.

    
    
    if (error) return <p>A network error was encountered</p>
    
    return (
      imageURL && (
        <>
          <h1>An image</h1>
          <img src={imageURL} alt={"placeholder text"} />
        </>
      )
    );
    

To set this `error`, we’ll add it to the component’s state.

    
    
    const [imageURL, setImageURL] = useState(null);
    const [error, setError] = useState(null);
    

And finally, to assign `error` a value when a request fails, we’ll add a
conditional to check the response status, and set it where our console.error
line was.

    
    
    useEffect(() => {
      fetch("https://jsonplaceholder.typicode.com/photos", { mode: "cors" })
        .then((response) => {
          if (response.status >= 400) {
            throw new Error("server error");
          }
          return response.json();
        })
        .then((response) => setImageURL(response[0].url))
        .catch((error) => setError(error));
    }, []);
    

Notice how we also handle errors in the `then` block? This is because the
`fetch` request itself might not fail, but rather complete successfully and
yield a response. However, the response received may not be what our app
expected. To handle this case, we check the response status codes.

Now when a bad URL is passed or the API returns an unexpected response, the
page will relay that information to the user.

#### Loading state

In the same way we added an error value in state to check for errors, we can
also add a loading value to check whether the request is resolved or not.

    
    
    const Image = () => {
      const [imageURL, setImageURL] = useState(null);
      const [error, setError] = useState(null);
      const [loading, setLoading] = useState(true);
    
      useEffect(() => {
        fetch("https://jsonplaceholder.typicode.com/photos", { mode: "cors" })
          .then((response) => {
            if (response.status >= 400) {
              throw new Error("server error");
            }
            return response.json();
          })
          .then((response) => setImageURL(response[0].url))
          .catch((error) => setError(error))
          .finally(() => setLoading(false));
      }, []);
    
      if (error) return <p>A network error was encountered</p>;
      if (loading) return <p>Loading...</p>;
    
      return (
        <>
          <h1>An image</h1>
          <img src={imageURL} alt={"placeholder text"} />
        </>
      );
    };
    

### Using custom hooks

We can separate out the fetching logic altogether into a custom hook. This
will allow us to make the logic reusable and easily testable.

Here’s how we would do it for our example:

    
    
    import { useState, useEffect } from "react";
    
    const useImageURL = () => {
      const [imageURL, setImageURL] = useState(null);
      const [error, setError] = useState(null);
      const [loading, setLoading] = useState(true);
    
      useEffect(() => {
        fetch("https://jsonplaceholder.typicode.com/photos", { mode: "cors" })
          .then((response) => {
            if (response.status >= 400) {
              throw new Error("server error");
            }
            return response.json();
          })
          .then((response) => setImageURL(response[0].url))
          .catch((error) => setError(error))
          .finally(() => setLoading(false));
      }, []);
    
      return { imageURL, error, loading };
    };
    
    const Image = () => {
      const { imageURL, error, loading } = useImageURL();
    
      if (error) return <p>A network error was encountered</p>;
      if (loading) return <p>Loading...</p>;
    
      return (
        <>
          <h1>An image</h1>
          <img src={imageURL} alt={"placeholder text"} />
        </>
      );
    };
    

If we ever needed to fetch images in different components, instead of
rewriting all of that fetching logic we could simply call `useImageURL`.

### Managing multiple fetch requests

In a full-scale web app, you’re often going to be making more than one
request, and you need to be careful with how you organize them. A common issue
that new React developers face when their apps start making multiple requests
is called a _waterfall of requests_. Let’s look at an example.

We have two components making fetch requests: `Profile` and its child
component `Bio`. The requests in `Profile` and `Bio` are both firing inside of
their respective components. On the surface this looks like a well-organized
separation of concerns, but in this case, it comes at a cost in performance.

Notice how `Bio` is taking an extra second to display? Their fetch requests
should both take 1000ms to resolve so what’s going on? In React, the component
is not rendered until it is actually called. If JSX has conditional logic, the
false branches will never render until they become true. `Bio` has to wait for
the request inside of `Profile` to resolve before it starts rendering, which
means the request inside `Bio` isn’t sent.

If we remove the short-circuiting conditional that waits for `imageURL`, `Bio`
would send a request immediately, but that would mean abandoning our loading
screen. Instead of compromising on design, we can lift the request up the
component tree and pass its response as a prop to `Bio`.

To see this in action, go back to that embedded CodeSandbox and comment out
the current `Profile` and `Bio` components, and uncomment the currently
commented ones.

Now we have both requests firing as soon as `Profile` renders. The request for
`imageURL` resolves 2 seconds before the `bioText` request, and our div
containing `<Bio />` renders. When `bioText` resolves, an update will be made
in state which will trigger a rerender in `<Bio />`, adding that text
description to the page.

In all of the code examples above, we added an artificial `delay` with the
`setTimeout` function. As you’ve likely guessed by now, this is to help you
walk through the data fetching basics in the lesson. We recommend removing
these `delay`s and play around with the code examples to further cement the
concepts.

### Data fetching libraries

We’ve only just begun to scratch the surface of data fetching on the frontend.
Keeping your frontend data up-to-date with the server is a challenging task to
accomplish. Managing “async” state becomes increasingly complex with each
added feature.

You’ve already tasted the complexity of data fetching in this lesson. Each
request has to have a _minimum_ of three states to achieve an optimal user
experience: `data`, `loading`, and `error`. Although some libraries can help
you with data fetching and more, it is highly recommended to use vanilla React
data fetching for all the projects in this course. The lessons you will learn
while doing so will be invaluable.

### Assignment

  1. Read [Modern API data fetching methods](https://blog.logrocket.com/modern-api-data-fetching-methods-react/) for a brief overview of what was discussed in this lesson.
  2. Read [How to fetch data in React with performance in mind](https://www.developerway.com/posts/how-to-fetch-data-in-react) to learn more about efficiently handling fetch requests in React components.

### Knowledge check

This section contains questions for you to check your understanding of this
lesson on your own. If you’re having trouble answering a question, click it
and review the material it links to.

  * How can you fetch data from an API in React?
  * Why should you manually throw errors in fetch requests?
  * How can you avoid waterfalling requests?

### Additional resources

This section contains helpful links to related content. It isn’t required, so
consider it supplemental.

  * [TanStack Query](https://tanstack.com/query/latest/docs/react/overview) is a library that handles all the necessary states and offers built-in support for major features, such as caching.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/react/the_react_ecosystem/fetching_data_in_react.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-react-new-
fetching-data-in-
react&template=suggestion.yaml&title=Fetching+Data+In+React%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/react) [Sign in to track progress](/sign_in) [ Next
lessonGo to next lesson Next Lesson ](/lessons/node-path-react-new-styling-
react-applications)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

