Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![React](/assets/badge-
react-d347c579ca6df9afc0ef4127bb4fe6dc4002be06cb241f4d70b37c412f56cec2.svg)
](/paths/full-stack-javascript/courses/react)

#  More On State

[

##  React Course

](https://www.theodinproject.com/paths/full-stack-javascript/courses/react)

### Introduction

This lesson will build upon the previous lesson on state and introduce further
concepts and techniques to manage state. Let’s dive in.

### Lesson overview

This section contains a general overview of topics that you will learn in this
lesson.

  * How to structure state.
  * How state updates.
  * Learn about controlled components.

### How to structure state

Managing and structuring state effectively is by far one of the most crucial
parts of building your application. If not done correctly it can become a
source of bugs and headaches.

The assignment items go through the topic thoroughly, but as a general rule of
thumb: don’t put values in state that can be calculated using existing values,
state, and/or props.

#### State should not be mutated

Mutating state is a no-go area in React as it leads to unpredictable results.
Primitives are already immutable, but if you are using reference type values
i.e. arrays and objects, never mutate them. According to React documentation,
we should treat state as if it was _immutable_. In order for us to change
state, we should always use the `setState` function. Make sure to run the
following example locally and see the difference for yourself.

    
    
    function Person() {
      const [person, setPerson] = useState({ name: 'John', age: 100 });
    
      // BAD - Don't do this!
      const handleIncreaseAge = () =>{
        // mutating the current state object
        person.age = person.age + 1;
        setPerson(person);
      };
    
      // GOOD - Do this!
      const handleIncreaseAge = () =>{
        // copy the existing person object into a new object
        // while updating the age property
        const newPerson = { ...person, age: person.age + 1 };
        setPerson(newPerson);
      };
    
      return (
        <>
          <h1>{person.name}</h1>
          <h2>{person.age}</h2>
          <button onClick={handleIncreaseAge}>Increase age</button>
        </>
      );
    }
    

#### Objects and arrays in state

In the above example, notice how we _create_ a new object, and then copy the
existing state values into the new object while providing a new value for
`age`. That is because if we don’t provide a new object to `setState` it is
not guaranteed to re-render the page. Therefore we should always provide a new
Object for `setState` to trigger a re-render. `setState` uses
[Object.is](https://developer.mozilla.org/en-
US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) to determine if the
previous state is the same.

As for nested objects and arrays, state can get tricky fast since you will
have to copy the nested items as well. Be careful when using them.

### How state updates

State updates are asynchronous. What this implies is whenever you call the
`setState` function, React will apply the update in the **next** component
render. This concept takes a while to wrap your head around. With a lot of
practice, you’ll get the hang of it in no time.

Remember, state variables aren’t reactive, the component is. This can be
understood by the fact that calling `setState` re-renders the entire component
instead of just changing the state variable on the fly.

    
    
    function Person() {
      const [person, setPerson] = useState({ name: 'John', age: 100 });
    
      const handleIncreaseAge = () =>{
        console.log("in handleIncreaseAge (before setPerson call): ", person)
        setPerson({ ...person, age: person.age + 1 });
        // we've called setPerson, surely person has updated?
        console.log("in handleIncreaseAge (after setPerson call): ", person);
      };
    
      // this console.log runs every time the component renders
      // what do you think this will print?
      console.log("during render: ", person);
    
      return (
        <>
          <h1>{person.name}</h1>
          <h2>{person.age}</h2>
          <button onClick={handleIncreaseAge}>Increase age</button>
        </>
      );
    }
    

These are the logs:

[![browser console of above code
snippet](https://cdn.statically.io/gh/TheOdinProject/curriculum/bd3063e12816ac241f73daeffa600ca89e56c443/react/states_and_effects/more_on_state/imgs/00.png)](https://cdn.statically.io/gh/TheOdinProject/curriculum/bd3063e12816ac241f73daeffa600ca89e56c443/react/states_and_effects/more_on_state/imgs/00.png)

Uh oh, what is happening? Let’s break it down (ignore the double
`console.logs` for the render case, this is covered in the upcoming lessons).

  1. The component renders for the first time. The `person` state variable is initialized to `{ name: 'John', age: 100 }`. The “during render” `console.log` prints the state variable.
  2. The button is clicked invoking `handleIncreaseAge`. Interestingly, the `console.log` before and after the `setPerson` call prints the same value.
  3. The component re-renders. The `person` state variable is updated to `{ name: 'John', age: 101 }`.

The `person` state stays the same throughout the current render of the
component. This is what “state as a snapshot” refers to. The `setState` call
triggers a component re-render and the `person` state is updated to the new
value.

#### The unexpected infinite loop

The following is an infinite loop, can you guess why? Drop by in our [Discord
chatroom](https://discord.com/invite/fbFCkYabZB), tell us why, and score a
brownie point!

    
    
    function Time() {
      const [time, setTime] = useState(new Date());
    
      setTime(new Date());
    
      return (
        <h1>{time.toLocaleTimeString()}</h1>
      );
    }
    

#### State updater functions

A trick question. Let’s look at another implementation of `handleIncreaseAge`;
what do you think it does?

    
    
    const handleIncreaseAge = () => {
      setPerson({ ...person, age: person.age + 1 });
      setPerson({ ...person, age: person.age + 1 });
    };
    

Surely, it will increase the age by 2? Nope. The above code is saying to
React:

> Hey, replace the current render’s `person` with an increase in age by 1.
> Then, replace the current render’s `person` with an increase in age by 1.

Notice the word “replace”. When you pass in the value to the `setState`
function, React will replace the current state with the value you passed in.
You might be wondering, what if I want to update the state multiple times
using the latest state? This is where the state updater function comes in.

    
    
    const handleIncreaseAge = () => {
      setPerson((prevPerson) => ({ ...prevPerson, age: prevPerson.age + 1 }));
      setPerson((prevPerson) => ({ ...prevPerson, age: prevPerson.age + 1 }));
    };
    

When a callback is passed to the `setState` function, it ensures that the
latest state is passed in as an argument to the callback.

Using an updater is not always necessary. If you want to change the state
using your previous state, and you prefer consistency over verbosity then you
might consider using an updater.

#### React batches state updates

There are two `setPerson` calls in the above example, and from what we’ve
learned so far, a `setState` call triggers a component re-render. So, the
component should re-render twice, right? You would say yes, but React is
smart. Wherever possible React batches the state updates. Here the component
only re-renders once. We’d encourage you to use `console.log`s to verify this.

### Controlled components

There are native HTML elements that maintain their own internal state. The
`input` element is a great example. You type into an `input` and it updates
its own value on every keystroke. For many use-cases, you would like to
_control_ the value of the `input` element i.e. set its value yourself. This
is where controlled components come in.

    
    
    function CustomInput() {
      const [value, setValue] = useState('');
    
      return (
        <input
            type="text"
            value={value}
            onChange={(event) => setValue(event.target.value)}
        />
      );
    }
    

Instead of letting the `input` maintain its own state, we define our own state
using the `useState` hook. We then set the `value` prop of the `input` to the
state variable and update the state variable on every `onChange` event. Now,
every time the user types something in the input, React will ensure you have
the latest comment/review/post (whatever the user was typing) in `value`.

This pattern is extremely useful wherever you need user input i.e. typing in a
textbox, toggling a checkbox etc. Contrarily, yes, the `input` element can be
left uncontrolled and access its value through some other method. You don’t
need to worry about it yet as it is covered later on in the course. For now,
control your components!

### Assignment

  1. Read the following articles from the React documentation: 
    * [State as a Snapshot](https://react.dev/learn/state-as-a-snapshot)
    * [Choosing the State Structure](https://react.dev/learn/choosing-the-state-structure)
    * [Sharing State Between Components](https://react.dev/learn/sharing-state-between-components)
  2. Update the `Person` component we’ve been using above. 
    * Add two separate input fields for first name and last name. The updated full name should be displayed on every keystroke on either of the two input fields.
    * There are many ways you can do this. Keep in mind what you’ve learned in this lesson while coding it out.

### Knowledge check

This section contains questions for you to check your understanding of this
lesson on your own. If you’re having trouble answering a question, click it
and review the material it links to.

  * What should you keep in mind while declaring state?
  * Why should we always use `setState` to update our state?
  * What does “state as a snapshot” mean?
  * What’s the difference between passing a value vs a callback to the `setState` function?
  * Why should we always provide a new Object to `setState`?
  * Why would you want to control a component?

### Additional resources

This section contains helpful links to related content. It isn’t required, so
consider it supplemental.

  * We intentionally skipped some of the articles pertaining to state from the React documentation. We are confident that the concepts covered thus far will equip you with enough knowledge to tackle the projects to come in the course. Though if you want to delve into the topic further, you can read all of the articles in the [Adding Interactivity](https://react.dev/learn/adding-interactivity) and the [Managing State](https://react.dev/learn/managing-state) section.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/react/states_and_effects/more_on_state.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-react-new-
more-on-
state&template=suggestion.yaml&title=More+On+State%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/react) [Sign in to track progress](/sign_in) [ Next
lessonGo to next lesson Next Lesson ](/lessons/node-path-react-new-cv-
application)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

