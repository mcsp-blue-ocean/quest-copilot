Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![Foundations](/assets/badge-
foundations-4a1f6ae4009e6156a289aef0a3897283ff0e3fe1af6b5795aaf7260619dc11f4.svg)
](/paths/foundations/courses/foundations)

#  Introduction to Flexbox

[

##  Foundations Course

](https://www.theodinproject.com/paths/foundations/courses/foundations)

### Introduction

As you’ll learn, there are _many_ ways to move elements around on a web page.
New methods have been developed over the years and older things have fallen
out of style. Flexbox is a [relatively
new](https://medium.com/@BennyOgidan/history-of-css-grid-and-css-
flexbox-658ae6cfe6d2) way of manipulating elements in CSS, and its debut was
_revolutionary_.

Many resources put it near the end of their curriculum because it is somewhat
new as a technology. But at this point, it has become the default way of
positioning elements for many developers. Flexbox will be one of the most used
tools in your toolbox, so why not learn it first?

### Lesson overview

This section contains a general overview of topics that you will learn in this
lesson.

  * You will learn how to position elements using flexbox.
  * You will learn about flex containers and flex items.
  * You will learn how to create useful components and layouts that go beyond just stacking and centering items.

### Before we get started

Flexbox layouts can get a little complicated. In a previous lesson, you
learned how to inspect and debug things using your browser’s developer tools.
Those tools will be _crucial_ for you in the following lessons. If something
isn’t behaving the way you expect, inspecting it in the developer tools should
be your first step _every time_.

Flexbox isn’t necessarily any more difficult than the other concepts that
we’ve covered so far, but it _does_ have a few more moving parts. It is going
to be somewhat difficult to make use of any of the things you’re learning in
these first lessons until you get to the end and can put it all together. As
we go, do yourself a favor and **play with all of the code examples.**

You will almost definitely need to come back and reference these lessons (or a
couple of the resources we share with you) when you get to the assignments at
the end of the section, but if you take your time and experiment with all the
code examples we provide, you’ll know better where to look when that time
comes.

### Let’s flex!

Flexbox is a way to arrange items into rows or columns. These items will flex
(i.e. grow or shrink) based on some simple rules that you can define. To get
started, let’s look at a simple demonstration.

We’ve embedded a lot of interactive examples in these lessons. Take your time
to experiment with them as you go to cement the concepts in your mind!

See the Pen [ first flex
example](https://codepen.io/TheOdinProjectExamples/pen/QWgNxrp) by
TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

We’ll get into exactly what’s going on here soon enough. But for now, let’s
uncomment the two flex related CSS declarations in the above Codepen by
removing the `/*` and `*/` tags surrounding them, then check out the result.

Comments prevent the browser from interpreting lines as code, and are wrapped
between specific tags. CSS uses `/*`as an opening comment tag and `*/` as a
closing comment tag, while HTML and JavaScript have their own syntax.
Commented out lines of code can be ‘re-enabled’ simply by removing the comment
tags surrounding the code.

All 3 divs should now be arranged horizontally. If you resize the results
frame with the “1x”, “.5x” and “.25x” buttons you’ll also see that the divs
will ‘flex’. They will fill the available area and will each have equal width.

If you add another div to the HTML, inside of `.flex-container`, it will show
up alongside the others, and everything will flex to fit within the available
area.

If it’s hard to see what’s going on in the small embedded CodePen, feel free
to click the “Edit on CodePen” or “Fork on CodePen” button. This will bring
the example into a full-sized environment. Some of the later examples might
especially benefit from doing this.

#### Flex containers and flex items

As you’ve seen, flexbox is not just a single CSS property but a whole toolbox
of properties that you can use to put things where you need them. Some of
these properties belong on the _flex container_ , while some go on the _flex
items_. This is a simple yet important concept.

A flex container is any element that has `display: flex` on it. A flex item is
any element that lives directly inside of a flex container.

[![container-vs-
child](https://cdn.statically.io/gh/TheOdinProject/curriculum/8c0402439e1b0a9a156731bdab4ea64162688dab/foundations/html_css/flexbox/imgs/03.png)](https://cdn.statically.io/gh/TheOdinProject/curriculum/8c0402439e1b0a9a156731bdab4ea64162688dab/foundations/html_css/flexbox/imgs/03.png)

Somewhat confusingly, any element can be both a flex container _and_ a flex
item. Said another way, you can also put `display: flex` on a flex item and
then use flexbox to arrange _its_ children.

[![nesting flex
containers](https://cdn.statically.io/gh/TheOdinProject/curriculum/495704c6eb6bf33bc927534f231533a82b27b2ac/html_css/v2/foundations/flexbox/imgs/04.png)](https://cdn.statically.io/gh/TheOdinProject/curriculum/495704c6eb6bf33bc927534f231533a82b27b2ac/html_css/v2/foundations/flexbox/imgs/04.png)

Creating and nesting multiple flex containers and items is the primary way we
will be building up complex layouts. The following image was achieved using
_only_ flexbox to arrange, size, and place the various elements. Flexbox is a
_very_ powerful tool.

[![complex
example](https://cdn.statically.io/gh/TheOdinProject/curriculum/495704c6eb6bf33bc927534f231533a82b27b2ac/html_css/v2/foundations/flexbox/imgs/05.png)](https://cdn.statically.io/gh/TheOdinProject/curriculum/495704c6eb6bf33bc927534f231533a82b27b2ac/html_css/v2/foundations/flexbox/imgs/05.png)

### Knowledge check

This section contains questions for you to check your understanding of this
lesson on your own. If you’re having trouble answering a question, click it
and review the material it links to.

  * What’s the difference between a flex container and a flex item?
  * How do you create a flex item?

### Additional resources

This section contains helpful links to related content. It isn’t required, so
consider it supplemental.

  * [This Flexbox tutorial](https://internetingishard.netlify.app/html-and-css/flexbox/index.html) is a friendly tutorial for modern CSS layouts by Interneting Is Hard.

  * For a more interactive explanation and example, try this [Scrim on Flexbox](https://scrimba.com/learn/flexbox/your-first-flexbox-layout-flexbox-tutorial-canLGCw). Note that this Scrim requires logging into Scrimba in order to view.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/foundations/html_css/flexbox/flexbox-
intro.md) [ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Ffoundations-
introduction-to-
flexbox&template=suggestion.yaml&title=Introduction+to+Flexbox%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course
](/paths/foundations/courses/foundations) [Sign in to track
progress](/sign_in) [ Next lessonGo to next lesson Next Lesson
](/lessons/foundations-growing-and-shrinking)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

