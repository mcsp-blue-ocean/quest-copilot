Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![Intermediate HTML and CSS](/assets/badge-html-
css-91bc8d9c7ebb2e2f73eeb302c38a92d9ba6f182301dbd1868d7198fcc8376aeb.svg)
](/paths/full-stack-javascript/courses/intermediate-html-and-css)

#  Using Flexbox and Grid

[

##  Intermediate HTML and CSS Course

](https://www.theodinproject.com/paths/full-stack-
javascript/courses/intermediate-html-and-css)

### Introduction

Some may tell you there is a debate on the use of Grid vs. Flexbox and whether
or not one is superior to the other. The reality is much simpler - these are
complementary tools that can work together, and each has its own place in the
world of CSS.

### Learning outcomes

By the end of this lesson, you should be able to:

  * Know when you might want to use Flexbox over Grid
  * Know when you might want to use Grid over Flexbox
  * Know when you might want to use the two together

### Content first vs layout first design

A way to decide between Grid and Flexbox is to consider if your design starts
from the content, or from the layout.

In Content First Design, you begin with clarity of how the content should be,
and the layout follows. This is a great opportunity to use Flexbox. Its
flexible nature gives you control of the _behavior_ of items through logical
rules. How they grow, shrink, their ideal size and position in relation to
each other, all make the layout dynamic. While Flexbox gives you control over
its content, the final layout is only a consequence. Depending on the
dimensions of the flex container, the general layout can change a lot.

In Layout First Design, you decide how you want the pieces arranged, then fill
in the content. That is when Grid shines. Defining grid row and column tracks
gives you full control of layout. Content in a grid can only fill the spaces
of explicit or implicit tracks. So, when you have an idea of how the big
picture of a container should look like, Grid is the clear choice.

Content or Layout First Design do not force us to use either Flexbox or Grid!
Let’s try laying out a one dimensional set of items – a task many reserve for
Flexbox – using Grid.

See the Pen [ 1-Dimensional Grid | CSS
Grid](https://codepen.io/TheOdinProjectExamples/pen/mdByJRV) by TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

It works and looks absolutely _beautiful_! But imagine we would like to move
these boxes around in the future. Or, for instance, we wanted the third box to
stretch in a second row so that the boxes didn’t shrink too much to fit in
only one. Both of these things would be _possible_ in Grid. But if controlling
the layout isn’t our priority, Flexbox is more intuitive and fit for the task.

### Combining flexbox and grid

If you have one-dimensional content, Flexbox can make it easier to control how
that content is positioned in a Flex container. If, on the other hand, you
want to accurately place content on a complex layout in two-dimensions, Grid
can be simpler to use.

Say you want your overall layout to be a grid, but you want the grid items to
act as flex parents. This way, the grid items can be moved around using the
precise two-dimensional placement Grid allows for, while also allowing the
content inside the grid items to be capable of freely moving around using
Flex. Check out this example from CSS-Tricks.

See the Pen [ Combine Grid and
Flexbox](https://codepen.io/TheOdinProjectExamples/pen/vYeEOxN) by
TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

### Closing opinion

This lesson includes recommendations, not the “right” or “wrong” way of using
Flexbox or Grid. Ultimately, it comes down to personal preference and what a
developer feels is easier for whatever the given task might be. At this point
you have both of these tools in your toolbox and got a sneak peek at how they
can be used together or one in place of the other. The best way to learn
Flexbox and Grid is to build many projects with both of them and develop your
own opinion about which to use in different circumstances.

### Assignments

  1. If you haven’t already, read through the previously mentioned [article by CSS-Tricks](https://css-tricks.com/css-grid-replace-flexbox/)

  2. To look at many different use cases for Grid, have a look at [this video by Wes Bos](https://www.youtube.com/watch?v=HYji_V2aYa0)

  3. To gain some more insight on when to use Grid or Flexbox and why, read through this [article](https://webdesign.tutsplus.com/articles/flexbox-vs-css-grid-which-should-you-use--cms-30184)

### Knowledge check

This section contains questions for you to check your understanding of this
lesson. If you’re having trouble answering the questions below on your own,
review the material above to find the answer.

  * When might you use Flexbox over Grid?
  * When might you use Grid over Flexbox?
  * When might you use the two of these tools together?

### Additional resources

This section contains helpful links to other content. It isn’t required, so
consider it supplemental.

  * MDN wrote an in-depth article on the relationship between Grid and other layout methods [here](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout)
  * If you are a visual learner, [Flexbox30](https://www.samanthaming.com/flexbox30/) is a great resource for quick visual reference.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/intermediate_html_css/grid/using_flexbox_and_grid.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-intermediate-
html-and-css-using-flexbox-and-
grid&template=suggestion.yaml&title=Using+Flexbox+and+Grid%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/intermediate-html-and-css) [Sign in to track
progress](/sign_in) [ Next lessonGo to next lesson Next Lesson
](/lessons/node-path-intermediate-html-and-css-admin-dashboard)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

