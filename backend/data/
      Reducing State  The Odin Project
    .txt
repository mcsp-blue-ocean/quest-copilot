Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![React](/assets/badge-
react-d347c579ca6df9afc0ef4127bb4fe6dc4002be06cb241f4d70b37c412f56cec2.svg)
](/paths/full-stack-javascript/courses/react)

#  Reducing State

[

##  React Course

](https://www.theodinproject.com/paths/full-stack-javascript/courses/react)

### Introduction

You have probably heard about reducers before. In this lesson we are going to
learn _what_ they are, _when_ to use them and _how_ to use them in React with
the `useReducer` hook.

### Lesson overview

This section contains a general overview of topics that you will learn in this
lesson.

  * What are reducers.
  * When to use reducers.
  * What is the `useReducer` hook.

### What are reducers?

Reducers are pure functions that take a previous state and an action to return
a new state.

The action is an object with a _type_ property describing what the user did.
This object can also contain any other properties that our reducer might need
to produce the new state.

We can define a reducer that updates the state of a counter like this:

    
    
    function reducer(state, action) {
      switch (action.type) {
        case "incremented_count": {
          return { count: state.count + 1 };
        }
        case "decremented_count": {
          return { count: state.count - 1 };
        }
        case "set_count": {
          return { count: action.value };
        }
        default: {
          throw new Error("unknown action: " + action.type);
        }
      }
    }
    

Remember, reducers are pure functions so we shouldn’t mutate the state.

### When to use reducers?

If a component only needs to update its state in a couple of simple ways, you
don’t need to use reducers. The opposite can be said when a component has
become too big, hard to read or debug because of its state logic.

By using reducers, we can separate the state logic and even store it in a
different file or directory, leading to smaller components that are easier to
read.

Since reducers use _actions_ , we can easily track any state-related bugs back
to the dispatched action, and because our reducers are just pure functions, we
can test them in isolation.

### The useReducer hook

React allows us to use reducers in our components through a hook called
`useReducer`. This hook takes a reducer function and an initial state as
arguments, then returns an array with two values: the current state and a
`dispatch` function.

This `dispatch` function receives an **action** object as argument, which is
passed to our reducer function and the returned value from it is used to
update the state.

    
    
    const [state, dispatch] = useReducer(reducer, { count: 0 });
    
    function handleClick() {
      dispatch({ type: "incremented_count" });
    }
    

Similarly to the `set` function in `useState`, React _only updates the state
in the next render_ after calling the `dispatch` function. Keep in mind that
these functions use [`Object.is`](https://developer.mozilla.org/en-
US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) to determine if the
state has changed, if it hasn’t, then the component won’t re-render.

Whether you use `useState` or `useReducer` is up to you, they’re both
equivalent and you might use them both in the same component.

### Assignment

  1. Read through the React docs [Extracting state logic into a reducer](https://react.dev/learn/extracting-state-logic-into-a-reducer) to learn more about how to use reducers in React and how to refactor `useState` into `useReducer`. Don’t forget to complete the challenges at the end.

  2. Read the [useReducer](https://react.dev/reference/react/useReducer) React docs to learn more about this hook. Pay close attention to the [troubleshooting](https://react.dev/reference/react/useReducer#troubleshooting) section for common problems that you might encounter.

### Knowledge check

This section contains questions for you to check your understanding of this
lesson on your own. If you’re having trouble answering a question, click it
and review the material it links to.

  * What are reducers?
  * [How would you declare a reducer?](https://react.dev/reference/react/useReducer#writing-the-reducer-function)
  * What does the dispatch function do?
  * [What steps can you follow to migrate from useState to useReducer?](https://react.dev/learn/extracting-state-logic-into-a-reducer#consolidate-state-logic-with-a-reducer)

### Additional resources

This section contains helpful links to related content. It isn’t required, so
consider it supplemental.

  * It looks like this lesson doesn’t have any additional resources yet. Help us expand this section by contributing to our curriculum.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/react/more_react_concepts/reducing_state.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-react-new-
reducing-
state&template=suggestion.yaml&title=Reducing+State%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/react) [Sign in to track progress](/sign_in) [ Next
lessonGo to next lesson Next Lesson ](/lessons/node-path-react-new-refs-and-
memoization)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

