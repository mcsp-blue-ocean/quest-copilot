Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![Advanced HTML and CSS](/assets/badge-html-
css-91bc8d9c7ebb2e2f73eeb302c38a92d9ba6f182301dbd1868d7198fcc8376aeb.svg)
](/paths/full-stack-javascript/courses/advanced-html-and-css)

#  Media Queries

[

##  Advanced HTML and CSS Course

](https://www.theodinproject.com/paths/full-stack-javascript/courses/advanced-
html-and-css)

### Introduction

With media queries, it is possible to completely restyle your web projects
based on the size of a user’s screen. All of the lessons we’ve had so far have
focused on making sure that the individual elements of your layout are as
flexible as possible, but sometimes you will need to actually _change_ some of
your CSS values to accommodate a specific screen size. These changes could be
subtle shifts, such as adjusting margin, padding, or font-size to squeeze more
content onto the screen, or they could be big obvious shifts in layout. The
nature of the exact changes will depend on your design, but the underlying
technique is the same.

### Learning outcomes

  * You’ll learn how to implement media queries to create fully responsive websites that look great on any device.

### Media query syntax

The basic syntax for media queries is actually very simple.

    
    
    body {
      margin: 24px;
    }
    
    @media (max-width: 600px) {
      body {
        margin: 8px;
      }
    }
    

In the above example, the margin is changed based on screen size.
Specifically, on all screens _below or equal to_ 600px, the margin will be
`8px`, and on all screens _above_ `600px`, it will be `24px`.

Really, that’s all there is to it. You can create some complex shifting
layouts with just this knowledge alone. You can create an unlimited number of
media queries in a single document (Click the ‘Edit on CodePen’ button so you
can resize your screen and see the changes):

See the Pen [ Media Queries 1 | CSS
Responsiveness](https://codepen.io/TheOdinProjectExamples/pen/yLzYgZw) by
TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

You can also put any number of style definitions inside a media query:

See the Pen [ Media Queries 2 | CSS
Responsiveness](https://codepen.io/TheOdinProjectExamples/pen/XWempGr) by
TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

### Tips

#### Other queries

In all of the above examples, our queries specify a `max-width` which will
apply styles to any screen resolution _below_ the given style. Said another
way: a `max-width` query will apply on any screen up to the defined `max-
width`. It is also possible to define a `min-width`, which applies to screens
that are _larger_ than the given value. `max-height` and `min-height` are also
valid.

#### Limit media queries

As mentioned earlier, it is possible to create an unlimited number of media
queries for every possible screen size. However, it is best to minimize your
media-query usage and rely more on the natural flexibility of your layouts.
Consider the second embedded example above (“my cool site”). It only _needs_
one media query to accommodate all desktop and mobile sizes, and there’s no
real need to create more.

#### Common breakpoints

‘Breakpoint’ is the term for the screen size that triggers your media query.
You will find quite a lot of differing opinions on what exactly your
breakpoints should be. In general, it’s helpful to think about the kinds of
devices and screens that your users will be using. Mobile phones are usually
under `500px`. Tablets are often between `500px` and `1000px`. Anything larger
than `1000px` is likely to be a normal browser screen. Super wide screens are
also becoming more common, which means that your site _could_ end up being
viewed on a screen wider than `2000px`!

This does _not_ mean that you should just start your project with media
queries for each device. Each project is going to have different requirements
based on the design you’re trying to achieve. As mentioned above, try to limit
your breakpoints to just what you _need_. With many relatively simple layouts,
you can get by with only one mobile-centric breakpoint somewhere around
`500`-`600px`. More complex layouts might benefit from doing a full-sized
layout above `1200px`, an altered “tablet” layout between `600px` and `1200px`
and mobile below `600px`. The real takeaway here is that it doesn’t really
matter exactly where you set your breakpoints, just do what makes sense for
your project.

#### Zooming!

In most browsers, **zooming in on a webpage will change the effective
resolution of that page**. If your browser window is exactly `1000px` wide,
zooming in will cause the page to behave as if the screen is _smaller_ , and
will trigger media queries based on the simulated/zoomed screen resolution.
Zooming _out_ can be handy for debugging issues that arise on screens that are
larger than your own computer screen. Forgetting that you’ve zoomed in or out
on a webpage can cause some real confusion when breakpoints refuse to trigger
at the correct points.

### Print styles

You’ll often see media queries defined with the `screen` keyword like so:

    
    
    @media screen and (max-width: 480px) {
    }
    

This is not necessary, but it _does_ point toward another very useful
capability of media queries: changing styles based on the media type.
Everything we’ve covered so far has been specifically intended for viewing on
some kind of screen so specifying `screen` is redundant. However, it is
possible to create a different set of styles for your website when it is sent
to your printer or viewed in print-preview mode by using the `print` keyword.

    
    
    @media print {
      /* print styles go here! */
    }
    

This is not something we’re going to focus on in our curriculum, but it may be
something you want to consider taking advantage of in some cases. It’s fairly
common to change some colors (i.e. make things black/white), and add `display:
none` to hide elements that are useless in a printed environment (buttons, nav
links, etc).

### Assignment

  1. Look through [Using media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) on MDN. There are a few additional things you can do with media queries that might be worth knowing about, though their usage is much less common.

### Knowledge check

This section contains questions for you to check your understanding of this
lesson on your own. If you’re having trouble answering a question, click it
and review the material it links to.

  * How do you define a media query to create a mobile layout for your site?
  * What is the difference between `max-width` and `min-width` in a media query definition?

### Additional resources

This section contains helpful links to related content. It isn’t required, so
consider it supplemental.

  * This [Media Query Tutorial](https://www.freecodecamp.org/news/css-media-queries-breakpoints-media-types-standard-resolutions-and-more/) on FreeCodeCamp covers the same items we’ve touched on here.
  * If you want more hands-on practice, this [Conquering Responsive Layouts](https://courses.kevinpowell.co/conquering-responsive-layouts) course by Kevin Powell might interest you. You’ll have to sign up.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/advanced_html_css/responsive_design/media_queries.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-advanced-html-
and-css-media-
queries&template=suggestion.yaml&title=Media+Queries%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/advanced-html-and-css) [Sign in to track
progress](/sign_in) [ Next lessonGo to next lesson Next Lesson
](/lessons/node-path-advanced-html-and-css-homepage)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

