Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![JavaScript](/assets/badge-
javascript-626af7075a7914bc4f30bd941268ed883785c3fb29b3e9d023eb5ab6450353bb.svg)
](/paths/full-stack-javascript/courses/javascript)

#  A Very Brief Intro to CS

[

##  JavaScript Course

](https://www.theodinproject.com/paths/full-stack-
javascript/courses/javascript)

### Introduction

You’ve learned how to build some cool stuff already and, frankly, you could
probably make some decent websites without a crazy amount of additional formal
education. However, just because you can write English at a grade school level
doesn’t mean you will be editing the New York Times anytime soon.

In the world of programming, there’s a difference between solving a problem
the brute force way and solving a problem WELL. We touched on the first layer
of this when we covered basic programming and how you should break apart your
code into well-organized chunks.

If you assume those lessons were all about learning how to write good code,
these next few lessons are going to be about training yourself to figure out
the best code to write – the most elegant solution to the problem at hand. It
becomes particularly important whenever you start working with large data
sets, like when your website becomes highly successful.

We’re taking a look at some more Computer Science-y concepts here because they
are fundamental for a reason. Some problems require you to use tools beyond
just arrays and iterators. There’s no sense reinventing the wheel when others
have already figured out good methods for solving certain types of problems.

If that doesn’t get you interested, remember that this curriculum is meant to
prepare you for life beyond the web page. If you’re interested in applying for
a job, you’ll be asked questions that directly touch on some of this stuff.
It’s going to require you to put on your thinking cap (sorry, it had to happen
sometime), but we won’t be doing anything too crazy. We’ll stick to the
practical side of this material as opposed to getting too stuck in theory.

### Lesson overview

This section contains a general overview of topics that you will learn in this
lesson.

  * What is an algorithm?
  * What is pseudo-code?

### Assignment

  1. Watch [Introduction to Algorithms by David Malan](http://ed.ted.com/lessons/your-brain-can-solve-algorithms-david-j-malan) on TedEd to see how to think about algorithms.
  2. Watch [What is an Algorithm?](https://youtu.be/e_WfC8HwVB8) on YouTube for a more structured look at solving problems using algorithms.
  3. Read [this Quora answer about the importance of algorithms in web development](https://qr.ae/py3NAc) to get some context for why we’re going over this stuff.
  4. Watch [What is pseudocode?](https://www.youtube.com/watch?v=Rg-fO7rDsds)

### Knowledge check

This section contains questions for you to check your understanding of this
lesson on your own. If you’re having trouble answering a question, click it
and review the material it links to.

  * [What is an Algorithm?](https://youtu.be/e_WfC8HwVB8)
  * [What is the importance of algorithms in web development?](https://qr.ae/py3NAc)
  * [What is pseudocode?](https://www.youtube.com/watch?v=Rg-fO7rDsds)

### Additional resources

This section contains helpful links to other content. It isn’t required, so
consider it supplemental.

  * [Wikipedia on Computer Science](http://en.wikipedia.org/wiki/Computer_science)
  * [Wikipedia on Algorithms](http://en.wikipedia.org/wiki/Algorithm)
  * [Map of Computer Science](https://youtu.be/SzJ46YA_RaA)

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/javascript/computer_science/a_very_brief_intro_to_cs.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fjavascript-a-very-brief-
intro-to-
cs&template=suggestion.yaml&title=A+Very+Brief+Intro+to+CS%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/javascript) [Sign in to track progress](/sign_in) [ Next
lessonGo to next lesson Next Lesson ](/lessons/javascript-recursive-methods)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

