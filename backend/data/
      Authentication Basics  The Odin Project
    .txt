Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![NodeJS](/assets/badge-
nodejs-1432a58382afd13f5bf55d4e5eda07244a3aa5fae9cee98ea034f17d6a09d503.svg)
](/paths/full-stack-javascript/courses/nodejs)

#  Authentication Basics

[

##  NodeJS Course

](https://www.theodinproject.com/paths/full-stack-javascript/courses/nodejs)

### Introduction

Creating users and allowing them to log in and out of your web apps is a
crucial functionality that we are finally ready to learn! There is quite a bit
of setup involved here, but thankfully none of it is too tricky. You’ll be up
and running in no time! In this lesson, we’re going to be using
[passportJS](https://www.passportjs.org), an excellent middleware to handle
our authentication and sessions for us.

We’re going to be building a very minimal express app that will allow users to
sign up, log in, and log out. For now, we’re just going to keep everything
except the views in one file to make for easier demonstration, but in a real-
world project, it is best practice to split our concerns and functionality
into separate modules.

### Learning outcomes

By the end of this lesson, you should be able to do the following:

#### PassportJS

  * Understand the use order for the required middleware.
  * Describe what Strategies are.
  * Use the LocalStrategy to authenticate users.
  * Explain the purpose of cookies in authentication.
  * Review prior learning material (routes, templates, middleware, async/await, and promises).
  * Use PassportJS to set up user authentication with Express.

#### Data security/safety

  * Describe what bcrypt is and its use.
  * Describe what a hash is and explain the importance of password hashing.
  * Describe bcrypt’s `compare` function.

### Set up

We’re going to be using another Mongo database, so before we begin log in to
your mongo provider and create a new database and save its URL string
somewhere handy.

To begin, let’s set up a very minimal express app with a single MongoDB model
for our users. Create a new directory and use `npm init` to start the
package.json file then run the following to install all the dependencies we
need:

    
    
    npm install express express-session mongoose passport passport-local ejs
    

**Mongoose Update** : With the new 7.0.1 version of Mongoose callbacks are no
longer supported when querying a database. A promise will be returned instead,
meaning that you will now have to use async/await or promises to achieve the
same results. If you need a refresher on async/await you can find it in the
[Async And Await Lesson](https://www.theodinproject.com/lessons/node-path-
javascript-async-and-await) from the JavaScript Course. As you progress
through this lesson you will see a blend of using async/await with try/catch
blocks as well as other functions that use callbacks, which you’ve seen as
you’ve progressed through the NodeJS course. You can read more about this
change [here](https://mongoosejs.com/docs/migrating_to_7.html#dropped-
callback-support).

Next, let’s create our `app.js`:

**IMPORTANT NOTE** : For the moment we are saving our users with just a plain
text password. This is a _really_ bad idea for any real-world project. At the
end of this lesson, you will learn how to properly secure these passwords
using bcrypt. Don’t skip that part.

    
    
    /////// app.js
    
    const express = require("express");
    const path = require("path");
    const session = require("express-session");
    const passport = require("passport");
    const LocalStrategy = require("passport-local").Strategy;
    const mongoose = require("mongoose");
    const Schema = mongoose.Schema;
    
    const mongoDb = "YOUR MONGO URL HERE";
    mongoose.connect(mongoDb);
    const db = mongoose.connection;
    db.on("error", console.error.bind(console, "mongo connection error"));
    
    const User = mongoose.model(
      "User",
      new Schema({
        username: { type: String, required: true },
        password: { type: String, required: true }
      })
    );
    
    const app = express();
    app.set("views", __dirname);
    app.set("view engine", "ejs");
    
    app.use(session({ secret: "cats", resave: false, saveUninitialized: true }));
    app.use(passport.initialize());
    app.use(passport.session());
    app.use(express.urlencoded({ extended: false }));
    
    app.get("/", (req, res) => res.render("index"));
    
    app.listen(3000, () => console.log("app listening on port 3000!"));
    

Most of this should look familiar to you by now, except for the new imported
middleware for express-session and passport. We are not actually going to be
using express-session directly, it is a dependency that is used in the
background by passport.js. You can take a look at what it does
[here](https://github.com/expressjs/session).

To keep things simple, our view engine is set up to just look in the main
directory, and it’s looking for a template called `index.ejs` so go ahead and
create that:

    
    
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <title></title>
    </head>
    <body>
      <h1>hello world!</h1>
    </body>
    </html>
    

### Creating users

The first thing we need is a sign up form so we can actually create users to
authenticate! In the Library Tutorial website, you learned about validating
and sanitizing inputs. This is a _really good idea_ , but for the sake of
brevity, we’re going to leave that out here. Don’t forget to include
sanitation and validation when you get to the project.

Create a new template called `sign-up-form`, and a route for `/sign-up` that
points to it:

    
    
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <title></title>
    </head>
    <body>
      <h1>Sign Up</h1>
      <form action="" method="POST">
        <label for="username">Username</label>
        <input name="username" placeholder="username" type="text" />
        <label for="password">Password</label>
        <input name="password" type="password" />
        <button>Sign Up</button>
      </form>
    </body>
    </html>
    
    
    
    //// app.js
    
    app.get("/sign-up", (req, res) => res.render("sign-up-form"));
    
    

Next, create an `app.post` for the sign up form so that we can add users to
our database (remember our notes about sanitation, and using plain text to
store passwords…).

    
    
    app.post("/sign-up", async (req, res, next) => {
      try {
        const user = new User({
          username: req.body.username,
          password: req.body.password
        });
        const result = await user.save();
        res.redirect("/");
      } catch(err) {
        return next(err);
      };
    });
    

Let’s reiterate: this is not a particularly safe way to create users in your
database… BUT you should now be able to visit `/sign-up`, and submit the form.
If all goes well it’ll redirect you to the index and you will be able to go
see your newly created user inside your database.

### Authentication

Now that we have the ability to put users in our database, let’s allow them to
log-in to see a special message on our home page! We’re going to step through
the process one piece at a time, but first, take a minute to glance at the
[passportJS website](http://www.passportjs.org/) the documentation here has
pretty much everything you need to get set up. You’re going to want to refer
back to this when you’re working on your project.

PassportJS uses what they call _Strategies_ to authenticate users. They have
over 500 of these strategies, but we’re going to focus on the most basic (and
most common), the username-and-password, or what they call the `LocalStrategy`
[(documentation here)](http://www.passportjs.org/docs/username-password/). We
have already installed and required the appropriate modules so let’s set it
up!

We need to add 3 functions to our app.js file, and then add an app.post for
our `/log-in` path. Add them somewhere before the line that initializes
passport for us: `app.use(passport.initialize())`.

#### Function one : setting up the LocalStrategy

    
    
    passport.use(
      new LocalStrategy(async (username, password, done) => {
        try {
          const user = await User.findOne({ username: username });
          if (!user) {
            return done(null, false, { message: "Incorrect username" });
          };
          if (user.password !== password) {
            return done(null, false, { message: "Incorrect password" });
          };
          return done(null, user);
        } catch(err) {
          return done(err);
        };
      })
    );
    

This function is what will be called when we use the `passport.authenticate()`
function later. Basically, it takes a username and password, tries to find the
user in our DB, and then makes sure that the user’s password matches the given
password. If all of that works out (there’s a user in the DB, and the
passwords match) then it authenticates our user and moves on! We will not be
calling this function directly, so you won’t have to supply the `done`
function. This function acts a bit like a middleware and will be called for us
when we ask passport to do the authentication later.

### Functions two and three: sessions and serialization

To make sure our user is logged in, and to allow them to _stay_ logged in as
they move around our app, passport will use some data to create a cookie which
is stored in the user’s browser. These next two functions define what bit of
information passport is looking for when it creates and then decodes the
cookie. The reason they require us to define these functions is so that we can
make sure that whatever bit of data it’s looking for actually exists in our
Database! For our purposes, the functions that are listed in the passport docs
will work just fine.

    
    
    passport.serializeUser((user, done) => {
      done(null, user.id);
    });
    
    passport.deserializeUser(async (id, done) => {
      try {
        const user = await User.findById(id);
        done(null, user);
      } catch(err) {
        done(err);
      };
    });
    

Again, we aren’t going to be calling these functions on our own, they’re used
in the background by passport.

### Log in form

To keep things nice and simple let’s go ahead and add the login form directly
to our index template. The form will look just like our sign-up form, but
instead of `POST`ing to `/sign-up` we’ll add an `action` to it so that it
`POST`s to `/log-in` instead. Add the following to your index template:

    
    
    <h1>please log in</h1>
    <form action="/log-in" method="POST">
      <label for="username">Username</label>
      <input name="username" placeholder="username" type="text" />
      <label for="password">Password</label>
      <input name="password" type="password" />
      <button>Log In</button>
    </form>
    

… and now for the magical part! Add this route to your app.js file:

    
    
    app.post(
      "/log-in",
      passport.authenticate("local", {
        successRedirect: "/",
        failureRedirect: "/"
      })
    );
    

As you can see, all we have to do is call `passport.authenticate()`. This
middleware performs numerous functions behind the scenes. Among other things,
it looks at the request body for parameters named `username` and `password`
then runs the `LocalStrategy` function that we defined earlier to see if the
username and password are in the database. It then creates a session cookie
that gets stored in the user’s browser, and that we can access in all future
requests to see whether or not that user is logged in. It can also redirect
you to different routes based on whether the login is a success or a failure.
If we had a separate login page we might want to go back to that if the login
failed, or we might want to take the user to their user dashboard if the login
is successful. Since we’re keeping everything in the index we want to go back
to “/” no matter what.

If you fill out and submit the form now, everything should technically work,
but you won’t actually SEE anything different on the page… let’s fix that.

The passport middleware checks to see if there is a user logged in (by
checking the cookies that come in with the `req` object) and if there is, it
adds that user to the request object for us. So, all we need to do is check
for `req.user` to change our view depending on whether or not a user is logged
in.

Edit your `app.get("/")` to send the user object to our view like so:

    
    
    app.get("/", (req, res) => {
      res.render("index", { user: req.user });
    });
    

and then edit your view to make use of that object like this:

    
    
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <title></title>
    </head>
    <body>
      <% if (user) {%>
        <h1>WELCOME BACK <%= user.username %></h1>
        <a href="/log-out">LOG OUT</a>
      <% } else { %>
        <h1>please log in</h1>
        <form action="/log-in" method="POST">
          <label for="username">Username</label>
          <input name="username" placeholder="username" type="text" />
          <label for="password">Password</label>
          <input name="password" type="password" />
          <button>Log In</button>
        </form>
      <%}%>
    </body>
    </html>
    

So, this code checks to see if there is a user defined… if so it offers a
welcome message, and if NOT then it shows the login form. Neat!

As one last step… let’s make that log out link actually work for us. As you
can see it’s simply sending us to `/log-out` so all we need to do is add a
route for that in our app.js. Conveniently, the passport middleware adds a
logout function to the `req` object, so logging out is as easy as this:

    
    
    app.get("/log-out", (req, res, next) => {
      req.logout((err) => {
        if (err) {
          return next(err);
        }
        res.redirect("/");
      });
    });
    

You should now be able to visit `/sign-up` to create a new user, then log-in
using that user’s username and password, and then log out by clicking the log
out button!

#### A quick tip

In express, you can set and access various local variables throughout your
entire app (even in views) with the `locals` object. We can use this knowledge
to write ourselves a custom middleware that will simplify how we access our
current user in our views.

Middleware functions are simply functions that take the `req` and `res`
objects, manipulate them, and pass them on through the rest of the app.

    
    
    app.use((req, res, next) => {
      res.locals.currentUser = req.user;
      next();
    });
    

If you insert this code somewhere between where you instantiate the passport
middleware and before you render your views, you will have access to the
`currentUser` variable in all of your views, and you won’t have to manually
pass it into all of the controllers in which you need it.

### Securing passwords with bcrypt

Now, let’s go back and learn how to securely store user passwords so that if
anything ever goes wrong, or if someone gains access to our database, our user
passwords will be safe. This is _insanely_ important, even for the simplest
apps, but luckily it’s also really simple to set up.

First `npm install bcryptjs`. There is another module called `bcrypt` that
does the same thing, but it is written in C++ and is sometimes a pain to get
installed. The C++ `bcrypt` is technically faster, so in the future it might
be worth getting it running, but for now, the modules work the same so we can
just use `bcryptjs`.

Once it’s installed you need to require it at the top of your app.js and then
we are going to put it to use where we save our passwords to the DB, and where
we compare them inside the LocalStrategy.

#### Storing hashed passwords:

Password hashes are the result of passing the user’s password through a one-
way hash function, which maps variable sized inputs to fixed size pseudo-
random outputs.

Edit your `app.post("/sign-up")` to use the bcrypt.hash function which works
like this:

    
    
    bcrypt.hash(req.body.password, 10, async (err, hashedPassword) => {
      // if err, do something
      // otherwise, store hashedPassword in DB
    });
    

The second argument is the length of the “salt” to use in the hashing
function; salting a password means adding extra random characters to it, the
password plus the extra random characters are then fed into the hashing
function. Salting is used to make a password hash output unique, even for
users who use the same password, and to protect against [rainbow
table](https://en.wikipedia.org/wiki/Rainbow_table) and
[dictionary](https://en.wikipedia.org/wiki/Dictionary_attack) attacks.

Usually, the salt gets stored in the database in the clear next to the hashed
value, but in our case, there is no need to do so because the hashing
algorithm that `bcryptjs` uses includes the salt automatically with the hash.

The hash function is somewhat slow, so all of the DB storage stuff needs to go
inside the callback. Check to see if you’ve got this working by signing up a
new user with a simple password, then go look at your DB entries to see how
it’s being stored. If you’ve done it right, your password should have been
transformed into a really long random string.

It’s important to note that _how_ hashing works is beyond the scope of this
lesson. To learn more about the subject consider reading [This wikipedia
article](https://en.wikipedia.org/wiki/Cryptographic_hash_function).

#### Comparing hashed passwords:

We will use the `bcrypt.compare()` function to validate the password input.
The function compares the plain-text password in the request object to the
hashed password.

Inside your `LocalStrategy` function we need to replace the `user.password !==
password` expression with the `bcrypt.compare()` function.

    
    
    const match = await bcrypt.compare(password, user.password);
    if (!match) {
      // passwords do not match!
      return done(null, false, { message: "Incorrect password" })
    }
    

You should now be able to log in using the new user you’ve created (the one
with a hashed password). Unfortunately, users that were saved BEFORE you added
bcrypt will no longer work, but that’s a small price to pay for security! (and
a good reason to include bcrypt from the start on your next project)

### Additional resources

This section contains helpful links to other content. It isn’t required, so
consider it supplemental.

  * If you like video content, watch this [Youtube Playlist](https://www.youtube.com/playlist?list=PLYQSCk-qyTW2ewJ05f_GKHtTIzjynDgjK). You just need to watch the first 6 videos.

  * [This video](https://www.youtube.com/watch?v=8ZtInClXe1Q) gives a broad overview of some of the different methods to store passwords in databases, and the risks of some of them.

  * In [Passport: The Hidden Manual](https://github.com/jwalton/passport-api-docs), you can explore comprehensive explanations of Passport’s functions, gaining a deeper understanding of what each function accomplishes.

### Knowledge checks

This section contains questions for you to check your understanding of this
lesson. If you’re having trouble answering the questions below on your own,
review the material above to find the answer.

  * Which passportJS strategy did we use in this lesson?
  * Why does passportJS create a cookie?
  * What does the `bcrypt.compare()` function do?
  * Why should we include bcrypt when we begin a project?

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/nodeJS/authentication/authentication_basics.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnodejs-authentication-
basics&template=suggestion.yaml&title=Authentication+Basics%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/nodejs) [Sign in to track progress](/sign_in) [ Next
lessonGo to next lesson Next Lesson ](/lessons/nodejs-security-configuration)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

