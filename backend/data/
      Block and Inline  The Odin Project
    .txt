Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![Foundations](/assets/badge-
foundations-4a1f6ae4009e6156a289aef0a3897283ff0e3fe1af6b5795aaf7260619dc11f4.svg)
](/paths/foundations/courses/foundations)

#  Block and Inline

[

##  Foundations Course

](https://www.theodinproject.com/paths/foundations/courses/foundations)

### Introduction

In the previous lesson, we discovered that different display types have unique
box models, and we can modify the box calculation by changing the `display`
property. CSS has two box types: `block` and `inline` boxes, which determine
element behavior and interaction. The `display` property controls how HTML
elements appear on the webpage. We will explore its various options further in
this lesson.

### Lesson overview

This section contains a general overview of topics that you will learn in this
lesson.

  * You’ll learn about “Normal flow”.
  * You’ll learn the difference between `block` and `inline` elements.
  * You’ll learn which elements default to `block` and which elements default to `inline`.
  * You’ll learn what divs and spans are.

### Block vs inline

Most of the elements that you have learned about so far are block elements. In
other words, their default style is `display: block`. By default, block
elements will appear on the page stacked atop each other, each new element
starting on a new line.

Inline elements, however, do not start on a new line. They appear in line with
whatever elements they are placed beside. A clear example of an inline element
is a link, or `<a>` tag. If you stick one of these in the middle of a
paragraph of text, it will behave like a part of the paragraph. ([Like
this…](https://www.youtube.com/watch?v=dQw4w9WgXcQ)) The link’s text will sit
alongside other words in that paragraph. Additionally, padding and margin
behave differently on inline elements. In general, you do not want to try to
put extra padding or margin on inline elements.

#### The middle ground inline-block

Inline-block elements behave like inline elements, but with block-style
padding and margin. `display: inline-block` is a useful tool to know about,
but in practice, you’ll probably end up reaching for flexbox more often if
you’re trying to line up a bunch of boxes. Flexbox will be covered in-depth in
the next lesson.

### Divs and spans

We can’t talk about block and inline elements without discussing divs and
spans. All the other HTML elements we have encountered so far give meaning to
their content. For example, paragraph elements tell the browser to display the
text it contains as a paragraph. Strong elements tell the browser which texts
within are important and so on. Yet, divs and spans give no particular meaning
to their content. They are just generic boxes that can contain anything.

Having elements like this available to us is a lot more useful than it may
first appear. We will often need elements that serve no other purpose than to
be “hook” elements. We can give an id or class to target them for styling with
CSS. Another use case we will face regularly is grouping related elements
under one parent element to correctly position them on the page. Divs and
spans provide us with the ability to do this.

Div is a block-level element by default. It is commonly used as a container
element to group other elements. Divs allow us to _divide_ the page into
different blocks and apply styling to those blocks.

See the Pen [ block-inline-lesson-div-
example](https://codepen.io/TheOdinProjectExamples/pen/KKXXbwR) by
TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

Span is an inline-level element by default. It can be used to group text
content and inline HTML elements for styling and should only be used when no
other semantic HTML element is appropriate.

See the Pen [ Untitled](https://codepen.io/TheOdinProjectExamples/pen/abLLPor)
by TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

### Assignment

  1. The concept of “Normal flow” is implied in the box-model resources, but isn’t laid out very specifically. Read [“Normal Flow” from MDN](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow) to make sure you understand how elements lay themselves out by default.
  2. W3 schools’ [“HTML Block and Inline Elements”](https://www.w3schools.com/html/html_blocks.asp) has a description and a list of all the default block and inline elements.
  3. The Digital Ocean tutorial [“Inline vs Inline-block Display in CSS”](https://www.digitalocean.com/community/tutorials/css-display-inline-vs-inline-block) has a couple of great examples that clarify the difference between `inline` and `inline-block`.
  4. Go to our [CSS exercises repository](https://github.com/TheOdinProject/css-exercises) and navigate to the `margin-and-padding` directory. Review each README file prior to completing the following exercises in order: 
    * `01-margin-and-padding-1`
    * `02-margin-and-padding-2`

Note: Solutions for these exercises can be found in the `solution` folder of
each exercise.

  5. Apply what you learned about the box model to improve the look of your Recipe page’s index.html homepage. Currently, it’s just a plain list, so get creative with layouts, colors, and styles to make your page uniquely captivating.

### Knowledge check

This section contains questions for you to check your understanding of this
lesson on your own. If you’re having trouble answering a question, click it
and review the material it links to.

  * What is the difference between a block element and an inline element?
  * [What is the difference between an inline element and an inline-block element?](https://www.digitalocean.com/community/tutorials/css-display-inline-vs-inline-block)
  * [Is an `h1` block or inline?](https://www.w3schools.com/html/html_blocks.asp)
  * [Is `button` block or inline?](https://www.w3schools.com/html/html_blocks.asp)
  * [Is `div` block or inline?](https://www.w3schools.com/html/html_blocks.asp)
  * [Is `span` block or inline?](https://www.w3schools.com/html/html_blocks.asp)

### Additional resources

This section contains helpful links to related content. It isn’t required, so
consider it supplemental.

  * [This tutorial](https://learnlayout.com/no-layout.html) is a little dated at this point, but its examples are clear. The first 6 slides cover the material we’ve seen so far.
  * Watch [“this”](https://www.youtube.com/watch?v=nfXRw06FgK8) simple short video on What does the term “Normal Flow” Mean In CSS.
  * For a more interactive explanation and example, try this [Scrim on block and inline display](https://scrimba.com/scrim/co5024997a7e46c232d9abe55).

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/foundations/html_css/css-
foundations/block-and-inline.md) [ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Ffoundations-block-and-
inline&template=suggestion.yaml&title=Block+and+Inline%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course
](/paths/foundations/courses/foundations) [Sign in to track
progress](/sign_in) [ Next lessonGo to next lesson Next Lesson
](/lessons/foundations-introduction-to-flexbox)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

