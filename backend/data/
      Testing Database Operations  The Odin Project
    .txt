Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![NodeJS](/assets/badge-
nodejs-1432a58382afd13f5bf55d4e5eda07244a3aa5fae9cee98ea034f17d6a09d503.svg)
](/paths/full-stack-javascript/courses/nodejs)

#  Testing Database Operations

[

##  NodeJS Course

](https://www.theodinproject.com/paths/full-stack-javascript/courses/nodejs)

### Introduction

When the code that you are testing has to touch a database, the amount of
setup that you have to do gets quite a bit more complicated. Obviously you
don’t want to run your testing code on your production database because of the
risk of compromising your user’s data. In this lesson we’re going to set up a
new in-memory version of a mongo database and then tell our app to use that
when running our tests.

### Learning outcomes

By the end of this lesson, you should be able to do the following:

  * Explain the purpose of using a separate database for testing.
  * Use `mongodb-memory-server` to create a testing database
  * Familiarize yourself with an alternative method of database setup for your testing environment.

### But do you even need to test that?

Before diving in, you might want to consider whether or not the database
operations you’re testing even need to be tested in the first place. If you
are simply reading and writing straight from a database using `mongoose` or
some other db module, you might not really need to test that code. Mongoose
(and presumably all other popular db modules) already has [plenty of
tests](https://github.com/Automattic/mongoose/tree/master/test) for all of its
actions, so if you are just serving up a JSON API and all you’re doing is
leveraging functions from another module then those operations are already
covered.

If your queries are complicated, you might justify adding tests to make sure
that you are using them correctly and that the code you have written is doing
what you intend it to, and if you are using any of your own code to do some
filtering, sorting, or other manipulations of the data you will want to test
that as well. In the case of your own code, however, it would be better if you
could pull those things out into their own modules, separate from your
database operations so you can test them without messing with the database.

### mongodb-memory-server

There are cases, however, when you are going to want to test things that touch
your database, so this lesson is going to cover how to do that.

We’re going to use an npm package called `mongodb-memory-server`. You can see
the specifics on their [github repo](https://github.com/nodkz/mongodb-memory-
server), but basically this package will spin up a fresh in-memory mongoDB
server that you can connect to with mongoose, and then use for your testing
environment. Since it’s creating a fresh DB every time you don’t have to worry
about trying to keep your data in sync, or polluting your production database.

Setting it up is actually pretty simple, but there are a few things you need
to do. First, in your actual app, you need to move your mongo/mongoose setup
into its own file as seen in the simple example below.

    
    
    //// mongoConfig.js
    const mongoose = require("mongoose");
    
    const mongoDb = `YOUR MONGO URL`;
    
    mongoose.connect(mongoDb, { useNewUrlParser: true });
    const db = mongoose.connection;
    db.on("error", console.error.bind(console, "mongo connection error"));
    

The above code should look very familiar to you by now… it’s the same setup
code we’ve been using all along. The only difference is that we’ve moved it
out to its own file so that in our test files we can use a _different_ config
file that sets up mongodb-memory-server for us. All you have to do now is
`require("./mongoConfig")` in your `app.js` file.

Next we need to create a separate config for our testing environment. The
config file that you can find on the `mongodb-memory-server` repo README
should work just fine. Below is a slightly edited version of it. Copy this to
a new file called `mongoConfigTesting.js`

    
    
    //// mongoConfigTesting.js 
    const mongoose = require("mongoose");
    const { MongoMemoryServer } = require("mongodb-memory-server");
    
    async function initializeMongoServer() {
      const mongoServer = await MongoMemoryServer.create();
      const mongoUri = mongoServer.getUri();
    
      mongoose.connect(mongoUri);
    
      mongoose.connection.on("error", e => {
        if (e.message.code === "ETIMEDOUT") {
          console.log(e);
          mongoose.connect(mongoUri);
        }
        console.log(e);
      });
    
      mongoose.connection.once("open", () => {
        console.log(`MongoDB successfully connected to ${mongoUri}`);
      });
    }
    
    module.exports = initializeMongoServer;
    

Now, if your tests are set up similarly to the tests in our last project, you
can simply call this function in your testing file, and then any operations
that work on your mongo database will use this testing one instead of your
real one.

### A couple of notes

Since you are starting your tests with a fresh database it will probably be
useful for you to use a `beforeAll` function in your testing suite to add a
couple of items to the database before running tests.

This is also not the only way to set up a testing environment! If you are
using nconf, or command-line arguments or anything else to set up your
development and production environments, you could easily add a `testing`
environment that uses this `mongodb-memory-server`. The [Jest
Docs](https://jestjs.io/docs/en/mongodb) demonstrate an alternative (but
similar) setup to the simple one we have here. The common element here is that
no matter how you accomplish it, our goal is to use this alternative DB when
running our tests.

### Knowledge check

This section contains questions for you to check your understanding of this
lesson. If you’re having trouble answering the questions below on your own,
review the material above to find the answer.

  * What is the purpose of using a separate database for testing?
  * How would you create and setup a testing database using the npm package `mongodb-memory-server`?
  * [What is an alternative method of database setup for your testing environment?](https://jestjs.io/docs/en/mongodb)

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/nodeJS/testing_express/testing_database_operations.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnodejs-testing-database-
operations&template=suggestion.yaml&title=Testing+Database+Operations%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/nodejs) [Sign in to track progress](/sign_in) [ Next
lessonGo to next lesson Next Lesson ](/lessons/nodejs-where-s-waldo-a-photo-
tagging-app)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

