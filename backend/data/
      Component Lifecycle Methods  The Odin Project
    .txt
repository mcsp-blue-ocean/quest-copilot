Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![React](/assets/badge-
react-d347c579ca6df9afc0ef4127bb4fe6dc4002be06cb241f4d70b37c412f56cec2.svg)
](/paths/full-stack-javascript/courses/react)

#  Component Lifecycle Methods

[

##  React Course

](https://www.theodinproject.com/paths/full-stack-javascript/courses/react)

### Introduction

In the previous section, you’ve learned about a component’s lifecycle. In
functional components, we’ve primarily used the `useEffect` hook to perform
tasks throughout the lifecycle, but in class components we have to use
specific lifecycle methods instead.

We’ll start with a short recap of what a components lifecycle is. There are
three stages to a component’s life: mounting, updating, and unmounting. Each
of these have a method assigned to them within class components, which is what
we are going to cover in this lesson.

### Lesson overview

This section contains a general overview of topics that you will learn in this
lesson.

  * How to use lifecycle methods in a class component

### render()

The render function is the most used lifecycle method, and one that you’ve
come across in the last class components lesson. It is the only required
lifecycle method in a class component. It runs on mount and update of a
component. Render should be pure, meaning it doesn’t modify component state,
returns the same thing each time it’s called (given the same inputs), and
doesn’t directly interact with the browser.

### componentDidMount()

This method is run after the component is mounted (inserted in the DOM tree).
You should make any calls to fetch data that is needed for the component here.
It is also a good place to do anything that is reliant on the component, such
as drawing on a canvas element that you just rendered.

### componentDidUpdate()

This method is run after a component re-renders. Because of this, you have to
be careful about what you update in this method, as if you’re updating state
indiscriminately, a re-render is caused, and you’ll end up in an endless loop.
You can avoid this issue by using conditional statements about the equality of
previous and current props when updating state.

In this method you should be updating anything that needs to be changed in
response to either the DOM changing, or any states that you might want to act
on upon change. For example, you’d want to refetch user data if the user
changes.

### componentWillUnmount()

This is the last lifecycle method, which is called before a component is
unmounted and destroyed. In this method you should be performing cleanup
actions, so that would be cancelling network requests, clearing timers, etc.

### How useEffect() combines the lifecycle methods

Now that we’ve learnt about class lifecycle methods, it’s useful to understand
that the `useEffect` hook used in functional components is essentially a
combination of `componentDidMount`, `componentDidUpdate`, and
`componentWillUnmount`. Which method/methods it relates to varies based on
it’s dependency array, and if it returns anything.

  * An empty dependency array would be equivalent to `componentDidMount`.
  * A dependency array with a value/values in it would be a combination of `componentDidMount` and `componentDidUpdate`, but only updating when dependencies change.
  * No dependency array would be equivalent to `componentDidMount` and `componentDidUpdate` combined.
  * A return function inside of a `useEffect()` hook would be equivalent to `componentWillUnmount`.

For example:

    
    
      useEffect(() => {
        placeholderFunction();
        return () => cleanupFunction();
      }, [])
    

In this snippet, the useEffect contains the functionality of
`componentDidMount`, and `componentWillUnmount` via the return function. This
example doesn’t have the `componentDidUpdate` functionality because of an
empty dependency array.

### Assignment

  1. Check out this [lifecycle diagram](https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/) to see a good visual representation of a components lifecycle methods.

  2. Read this [component lifecycle documentation](https://reactjs.org/docs/react-component.html#the-component-lifecycle) by the people who made react!

    * You only have to worry about the methods in bold, but you can read up on the others if you’re curious - they’re uncommon and you likely won’t need them in most of your apps.

### Knowledge check

This section contains questions for you to check your understanding of this
lesson on your own. If you’re having trouble answering a question, click it
and review the material it links to.

  * What is the only required lifecycle method?
  * What lifecycle method should you use for initial data fetching?
  * When you want to act upon change of the DOM, or of state, what lifecycle method would you use?
  * When performing cleanup actions, what lifecycle method should be used?
  * How does the useEffect hook combine some of the lifecycle methods?

### Additional resources

This section contains helpful links to related content. It isn’t required, so
consider it supplemental.

  * It looks like this lesson doesn’t have any additional resources yet. Help us expand this section by contributing to our curriculum.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/react/class_components/component_lifecycle_methods.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-react-new-
component-lifecycle-
methods&template=suggestion.yaml&title=Component+Lifecycle+Methods%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/react) [Sign in to track progress](/sign_in) [ Next
lessonGo to next lesson Next Lesson ](/lessons/node-path-react-new-
introduction-to-react-testing)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

