Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![React](/assets/badge-
react-d347c579ca6df9afc0ef4127bb4fe6dc4002be06cb241f4d70b37c412f56cec2.svg)
](/paths/full-stack-javascript/courses/react)

#  Styling React Applications

[

##  React Course

](https://www.theodinproject.com/paths/full-stack-javascript/courses/react)

### Introduction

Up until now you’ve been using vanilla CSS to style your React projects, but
there are other options available. This lesson is intended to be more like a
guide or a list of options for you to explore.

### Lesson overview

This section contains a general overview of topics that you will learn in this
lesson.

  * Know about ways to style React applications

### Vanilla CSS

Vanilla CSS is the simplest way to style. In the previous courses, you’ve
learned a lot of CSS and all of those skills are applicable to React. There
are a couple of things we’d like to highlight.

  1. `CSS Modules` let you write CSS style declarations that are scoped locally.
  2. `CSS Utility Frameworks` are a popular choice for styling React applications. They provide a set of pre-defined classes that you can directly use in your HTML, or JSX in our case. [Tailwind CSS](https://tailwindcss.com) is by far the most popular choice.

### CSS in JS

Why even write CSS in CSS when you can write it in JavaScript? Just kidding,
of course!

CSS-in-JS is a paradigm for styling front-end projects. It allows you to
entirely take control of CSS with JavaScript and extends it with various
features. Additionally, it also helps to apply styling in a logical fashion
i.e. based on state. There are various CSS-in-JS solutions. One of the most
popular ones in the React ecosystem is [styled-components](https://styled-
components.com/).

### Component libraries

What if everything’s already done for you? Styling, behavior, and
accessibility are taken care of for you in component libraries. As the name
suggests, these libraries provide adaptable and reusable components that you
can use directly in your project. These components include, but are not
limited to, dropdowns, drawers, calendars, toggles, tabs, and all other
components you can think of.

[Material UI](https://mui.com/), [Radix](https://www.radix-ui.com/), and
[Chakra UI](https://chakra-ui.com/) are worth a mention when talking about
component libraries.

For learning purposes throughout this course, we advise you to implement your
component’s styling from scratch i.e. use vanilla CSS or a CSS-in-JS option.

### Assignment

  1. Read [CSS Modules documentation](https://github.com/css-modules/css-modules) and [How to style React components using CSS Modules](https://www.makeuseof.com/react-components-css-modules-style/)

  2. Read [CSS vs CSS-in-JS](https://blog.logrocket.com/css-vs-css-in-js/) and [a thorough analysis of CSS-in-JS](https://css-tricks.com/a-thorough-analysis-of-css-in-js/)

  3. Skim through the [styled components documentation](https://styled-components.com/)

### Knowledge check

This section contains questions for you to check your understanding of this
lesson on your own. If you’re having trouble answering a question, click it
and review the material it links to.

  * [How can you use CSS Modules in your React app?](https://www.makeuseof.com/react-components-css-modules-style/)
  * What does CSS-in-JS mean?
  * What are component libraries?

### Additional resources

This section contains helpful links to related content. It isn’t required, so
consider it supplemental.

  * [Tailwind CSS documentation](https://tailwindcss.com/)

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/react/the_react_ecosystem/styling_react_applications.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-react-new-
styling-react-
applications&template=suggestion.yaml&title=Styling+React+Applications%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/react) [Sign in to track progress](/sign_in) [ Next
lessonGo to next lesson Next Lesson ](/lessons/node-path-react-new-shopping-
cart)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

