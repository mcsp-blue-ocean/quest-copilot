Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![Advanced HTML and CSS](/assets/badge-html-
css-91bc8d9c7ebb2e2f73eeb302c38a92d9ba6f182301dbd1868d7198fcc8376aeb.svg)
](/paths/full-stack-javascript/courses/advanced-html-and-css)

#  Natural Responsiveness

[

##  Advanced HTML and CSS Course

](https://www.theodinproject.com/paths/full-stack-javascript/courses/advanced-
html-and-css)

### Introduction

The first step to making responsive websites is using techniques that are
_naturally_ flexible. In a later lesson you’ll learn how to completely
rearrange items on a page based on screen size, but in most cases, it’s
preferable to rely on tools like flexbox and grid to make your pages work on a
wide range of screens first.

### Learning outcomes

  * You’ll learn a few tips for keeping your sites naturally responsive

Plain HTML, with no CSS is responsive. [Check this
out](https://codyloyd.github.io/responsive-html/), and shrink your browser
down to the size of a phone. It works perfectly! You could read that site on
an apple watch.

It’s not realistic for every website you create to be as simple as plain text
on a page, but it is important to keep in mind that most of the elements
you’re using to build your project are responsive until **you** change that
with CSS. If you approach your project with this mindset and do your best to
maintain that natural responsiveness, you might find that there isn’t _that_
much extra you need to do to make your sites properly responsive.

The rest of this lesson is a list of tips you can use to maintain natural
responsiveness.

### The viewport meta tag

When mobile phones first started getting web browsers, most websites were
_not_ optimized for such small screen resolutions. To get around this, most
phone browsers simply simulated a larger screen and displayed a zoomed-out
version of the page. These days, however, we almost never want that behavior
so we have to specify that we want our websites to be viewed at the actual
non-zoomed screen resolution.

For this reason, you should add this snippet into the `<head>` of your HTML
file in just about every project you work on.

    
    
    <meta name="viewport" content="width=device-width, initial-scale=1">
    

It simply sets the initial width of the webpage to the size of the actual
screen you’re viewing it on, and telling it not to zoom in or out. Easy!

### Avoid fixed width and height

The number one enemy of flexibility is a fixed width on an element. If you put
`width: 600px` on anything, then it will never be able to shrink below that
width, which ruins your chances of getting that thing to fit on most phone
screens. Likewise, sticking a fixed height on an element can cause issues if
the contents of that element run out of room.

Obviously the context will determine what works in a given situation, but an
easy fix in many cases is replacing `width` or `height` with `max-width` or
`min-height` (`min-width` and `max-height` are also valid and may be useful
depending on the context).

In the following example, notice how the fixed width causes our div to
overflow the screen! Change it to `max-width` and watch it shrink down to fit
the preview screen! Click ‘Fork on CodePen’, then ‘Save’, and navigate to the
‘Open Live View in a New Window’ icon at the bottom to see it in full window
size. Try changing the size of the window to see how `max-width` works. When a
`max-width` is defined, the element will not exceed that width but will shrink
if the screen is too small to accommodate it.

See the Pen [ max-width | CSS
Responsiveness](https://codepen.io/TheOdinProjectExamples/pen/GRMpreM) by
TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

This example shown below demonstrates the problem with static heights. On a
full-sized screen the text would fit inside the pink box just fine, but here
on this cramped embed, it overflows! What we want here is for the div to be
`300px` in most cases, but to grow instead of causing an overflow when the
text gets cramped. In this case changing `height: 300px` to `min-height:
300px` will fix the issue.

See the Pen [ height | CSS
Responsiveness](https://codepen.io/TheOdinProjectExamples/pen/qBjxVYg) by
TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

#### Avoid heights all together

In _most_ cases, you should avoid setting a height altogether. There are some
exceptions to this rule (headers and footers perhaps) but you should prefer
using margin and padding to increase space around your content. Using margin
and padding will keep your elements flexible no matter what the content inside
does.

#### When fixed widths are appropriate

Obviously there are cases when a fixed width is appropriate. It’s hard to make
a universal rule, but in general the smaller your widths the more likely it’s
fine to make them fixed. For example, a `32px` icon on your page isn’t going
to benefit from using `max-width` because you probably _don’t_ want it to
shrink. Likewise a `250px` sidebar probably needs to _always_ be `250px`. As
with anything you just need to consider your options and pick what seems to be
the most appropriate.

### Use flex and grid

Here’s a statement so obvious that it sounds like a joke: flexbox was
_created_ to enable the creation of flexible layouts. Simply using flex and
grid doesn’t necessarily guarantee perfect responsiveness, but they are really
helpful tools. You’ve already learned about the relevant properties here, but
things like `flex-wrap` and grid’s `minmax`, `auto-fill` and similar
properties can make some impressively responsive layouts without much extra
work.

### Assignment

  1. Read [“Using the viewport meta tag”](https://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag) on MDN to get a little more background and detail about the viewport meta tag and the nature of screen resolutions.
  2. [Using Percentages in CSS](https://codyloyd.com/2021/percentages/) is an article that tackles another common pitfall.
  3. [minmax() in auto-fill repeating tracks](https://gridbyexample.com/examples/example28/) demonstrates a really nice responsive grid feature.

### Knowledge check

This section contains questions for you to check your understanding of this
lesson. If you’re having trouble answering the questions below on your own,
review the material above to find the answer.

  * Why should you avoid fixed width?
  * Why should you avoid fixed height?
  * In what situations might it be appropriate to use a fixed height or width?
  * [Why should you avoid percentages?](https://codyloyd.com/2021/percentages/)

### Additional resources

This section contains helpful links to other content. It isn’t required, so
consider it supplemental for if you need to dive deeper into something.

  * [This free course on Conquering Responsive Layouts](https://courses.kevinpowell.co/conquering-responsive-layouts) by Kevin Powell provides great practice to work on your responsive layout chops.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/advanced_html_css/responsive_design/natural_responsiveness.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-advanced-html-
and-css-natural-
responsiveness&template=suggestion.yaml&title=Natural+Responsiveness%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/advanced-html-and-css) [Sign in to track
progress](/sign_in) [ Next lessonGo to next lesson Next Lesson
](/lessons/node-path-advanced-html-and-css-responsive-images)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

