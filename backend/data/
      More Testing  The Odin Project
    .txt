Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![JavaScript](/assets/badge-
javascript-626af7075a7914bc4f30bd941268ed883785c3fb29b3e9d023eb5ab6450353bb.svg)
](/paths/full-stack-javascript/courses/javascript)

#  More Testing

[

##  JavaScript Course

](https://www.theodinproject.com/paths/full-stack-
javascript/courses/javascript)

### Introduction

An important basic concept in testing is isolation. You should only test one
method at a time, and your tests for one function should not depend upon an
external function behaving correctly - especially if that function is being
tested elsewhere. The main reason for this is that when your tests fail, you
want to be able to narrow down the cause of this failure as quickly as
possible. If you have a test that depends on several functions, it can be hard
to tell exactly what is going wrong.

### Learning outcomes

By the end of this lesson, you should be able to do the following:

  * Explain what tightly coupled code is
  * Describe a pure function and how it relates to TDD
  * Explain what mocking is

### Pure functions

There are _many_ benefits to using TDD when you write your code. One of the
biggest benefits is less obvious at first - it helps you to write better code.
If you look back at some of your early projects you will probably notice how
_tightly coupled_ everything is. All of your functions include references to
functions in other parts of your code, and the whole thing is _filled_ with
DOM methods or `console.log()`.

Tightly coupled code is hard to test! Imagine trying to write tests for a
function like this:

    
    
    function guessingGame() {
      const magicNumber = 22;
      const guess = prompt('guess a number between 1 and 100!');
      if (guess > magicNumber) {
        alert('YOUR GUESS IS TOO BIG');
      } else if (guess < magicNumber) {
        alert('YOUR GUESS IS TOO SMALL');
      } else if (guess == magicNumber) {
        alert('YOU DID IT! 🎉');
      }
    }
    

Making this testable requires us to split up all the different things that are
happening. First, we do not need to test the functions `prompt` and `alert`
because they are built in to the browser. They are external to our program and
whoever wrote them has already tested them. What we _do_ need to test is the
number logic, which is much easier if we untangle it from the other functions:

    
    
    function evaluateGuess(magicNumber, guess) {
      if (guess > magicNumber) {
        return 'YOUR GUESS IS TOO BIG';
      } else if (guess < magicNumber) {
        return 'YOUR GUESS IS TOO SMALL';
      } else if (guess == magicNumber) {
        return 'YOU DID IT! 🎉';
      }
    }
    
    function guessingGame() {
      const magicNumber = 22;
      const guess = prompt('guess a number between 1 and 100!');
      const message = evaluateGuess(magicNumber, guess);
      alert(message);
    }
    
    guessingGame();
    

In this example, the only thing we really need to test is the `evaluateGuess`
function, which is much easier to test because it has a clear input and output
and doesn’t call any external functions. This implementation is _much_ nicer
as well because it’s much easier to extend. If we wanted to switch out the
`prompt` and `alert`s for methods that manipulate the DOM we can do that more
simply now and if we want to make our game more advanced by letting the user
make multiple guesses, that is also easier.

If we had written this program with TDD it is very likely that it would have
looked more like the second example to begin with. Test driven development
encourages better program architecture because it encourages you to write
_Pure Functions_.

  * Read [this quick article](https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c) about the value of ‘Pure Functions’.

### Mocking

There are two solutions to the ‘tightly coupled code’ problem. The first, and
best option is to simply remove those dependencies from your code as we did
above, but that is simply not always possible. The second option is
**mocking** \- writing “fake” versions of a function that always behaves
_exactly_ how you want. For example, if you’re testing a function that gets
information from a DOM input, you really don’t want to have to set up a
webpage and dynamically insert something into the input just to run your
tests. With a mock function, you could just create a fake version of the
input-grabbing function that always returns a specific value and use THAT in
your test.

### Assignment

  1. If you haven’t already, watch the ‘mocking’ videos from [this series](https://www.youtube.com/watch?v=3PjdxjWK0F0).
  2. Too much mocking can be a bad thing. It _is_ sometimes necessary, but if you have to set up an elaborate system of mocks to test any bit of your code, that means your code is too tightly coupled. [This article](https://medium.com/javascript-scene/mocking-is-a-code-smell-944a70c90a6a) might be a little extreme, but it contains several really good points about program architecture and testing.
  3. Now that you have some practice and context for TDD, [this section](https://jestjs.io/docs/setup-teardown) of the Jest docs will probably make good sense to you.
  4. Jest includes some _really_ handy mocking functions. Read about them in the [official docs](https://jestjs.io/docs/mock-functions).
  5. Watch [this amazing video](https://www.youtube.com/watch?v=URSWYvyc42M) that covers _what_ to test in your codebase. The video is specifically about testing the Ruby language, but that doesn’t matter _at all_. The concepts here ring true in any language, and luckily Ruby is a clear enough language that you will be able to follow along just fine.

### Knowledge check

This section contains questions for you to check your understanding of this
lesson. If you’re having trouble answering the questions below on your own,
review the material above to find the answer.

  * What is tightly coupled code?
  * [What are the two requirements for a function to be pure?](https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c)
  * [What are side effects and why is it important to identify them when testing a function?](https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c)
  * What are two solutions to the tightly coupled code problem?
  * What is mocking?
  * When would you use a mock function?
  * [How should you test incoming query messages?](https://youtu.be/URSWYvyc42M?t=699)
  * [Why should you not test implementation?](https://youtu.be/URSWYvyc42M?t=792)
  * [Should you test private methods?](https://youtu.be/URSWYvyc42M?t=1102)
  * [Why should you not test outgoing messages with no side effects?](https://youtu.be/URSWYvyc42M?t=1370)

### Additional resources

This section contains helpful links to other content. It isn’t required, so
consider it supplemental.

  1. This [jest cheat sheet](https://github.com/sapegin/jest-cheat-sheet) walks you quickly through all the frequently used methods.
  2. If you wish, you can add Jest to your webpack setup. Read about that process [here](https://jestjs.io/docs/webpack).

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/javascript/testing_javascript/more_testing.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-javascript-
more-
testing&template=suggestion.yaml&title=More+Testing%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/javascript) [Sign in to track progress](/sign_in) [ Next
lessonGo to next lesson Next Lesson ](/lessons/node-path-javascript-
battleship)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

