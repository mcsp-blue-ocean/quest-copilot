Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![Intermediate HTML and CSS](/assets/badge-html-
css-91bc8d9c7ebb2e2f73eeb302c38a92d9ba6f182301dbd1868d7198fcc8376aeb.svg)
](/paths/full-stack-javascript/courses/intermediate-html-and-css)

#  Positioning Grid Elements

[

##  Intermediate HTML and CSS Course

](https://www.theodinproject.com/paths/full-stack-
javascript/courses/intermediate-html-and-css)

### Introduction

In this lesson we will examine the different parts of a grid and explore
common properties that can be used to position grid items.

### Learning outcomes

By the end of this lesson, you should be able to:

  * Describe the differences between tracks, lines, and cells
  * Position items by defining their start and end lines
  * Use shorthand notation

### Reviewing tracks

Before we dive straight into positioning, let’s establish some terminology to
better understand the different parts of a grid. In the previous lesson you
learned that when you define a grid using `grid-template`, you are defining
the _tracks_ the grid will have. You can think of a grid track as any single
row or column on a grid.

To give an example, if we wanted to create a 3x3 grid with 100 pixel rows and
100 pixel columns, we need to define 3 horizontal tracks with a height of 100
pixels and 3 vertical tracks with a width of 100 pixels:

See the Pen [ 3x3 Layout | CSS
Grid](https://codepen.io/TheOdinProjectExamples/pen/poWvJXQ) by TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

You will notice two CSS lines have been commented out in this CodePen.
Uncomment the property in the `.first-row` class selector to see the grid
track between the first and second-row grid lines.

Next, uncomment the property in the `.last-column` class selector to see the
grid track between the third and fourth-column grid lines.

### Lines

Whenever we create grid tracks, grid lines are created _implicitly_. This is
important. Grid lines are only created after our grid tracks have been
defined. We can not explicitly create grid lines.

Every track has a start line and an end line. The lines are numbered from left
to right and top to bottom starting at 1. So our 3x3 grid above has vertical
lines for columns ranging from 1 to 4 and horizontal lines for rows ranging
from 1 to 4.

Grid lines are what we use to position grid items. We’ll get to that in a
minute, but first let’s take a deeper look at grid lines using our developer
tools.

If you open up developer tools in Chrome, you can navigate to the Layout pane
and find the Grid overlay display settings. Make sure that _show line numbers_
is enabled. Select the correct element from the Grid overlays (e.g. this might
be our `div.container` if you are inspecting our CodePen.) You should now see
an overlay of the grid lines.

Notice that the developer tools also show negative lines opposite from the
positive lines. You don’t have to worry about the negative lines for now, but
know that this gives you another option to use when positioning the grid
items.

### Cells

The space in a grid shared by a single row track and a single column track is
called a grid _cell_. You can think of a grid cell like a cell in a
spreadsheet: a space defined by a _row, column_ coordinate.

By default, each child element of a grid container will occupy one cell. In
the example above, we have 9 cells in our grid (3 rows x 3 columns), each with
one automatically positioned child element inside. The element marked with the
letter “A” is occupying a cell that lies in row track 1 (between row grid
lines 1 and 2) and column track 1 (between column grid lines 1 and 2). The
item marked with the letter “H” is in a cell at row track 3 (between row grid
lines 3 and 4) and column track 2 (between column grid lines 2 and 3).

But what happens if we wanted to change the order of our grid items? Or if we
want items to occupy more than one cell?

### Positioning

To get a feel for how items can be positioned we will create a mock floor plan
for an apartment. Let’s start with a total area of our apartment (the grid
container) divided into a 5x5 grid. To make this example a little clearer,
we’ll use a background color to distinguish our container space. Note that
we’re also using `display: inline-grid` here so that our container does not
stretch to take up space the way a block-level box would. This will just help
us better visualize the space.

See the Pen [ Positioning 1 | CSS
Grid](https://codepen.io/TheOdinProjectExamples/pen/rNGaOxB) by TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

As it stands this is a pretty sad unit. To make it less of an empty box and
more of a home we are going to add some items to our grid container that will
represent different rooms.

See the Pen [ Positioning 2 | CSS
Grid](https://codepen.io/TheOdinProjectExamples/pen/poWvjgY) by TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

Most of our rooms represent a single grid cell. But we have given ourselves a
large living room. (Yay!) We positioned this item using `grid-column-start`
and `grid-column-end`. Their property values represent the column grid lines
we wish it to start and end with.

You will also notice we have commented out property values for this item’s
grid row positioning. Uncomment the `grid-row-start` and `grid-row-end`
properties to see how our living room can get even bigger by taking up the
grid track between the first and third-row grid lines.

These properties allow us to use our existing grid lines to tell items how
many rows and columns each item should span across. Take a minute to play
around with the property values here. If the line numbers are confusing,
inspect the container using your dev tools to show the grid overlay.

Next, we need to use our space more efficiently. We will make the rest of our
rooms span multiple grid cells and fill out the rest of our apartment.

See the Pen [ Positioning 3 | CSS
Grid](https://codepen.io/TheOdinProjectExamples/pen/jOGEbrX) by TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

Now we have the blueprints for our full apartment. If you take a look at the
`#kitchen` selector you will see we used shorthand properties here. `grid-
column` is just a combination of `grid-column-start` and `grid-column-end`
with a slash between the two values. And `grid-row` is the shorthand version
for setting an item’s row positioning.

One problem with our floor plan is that the bathroom and kitchen are on
opposite ends of the apartment. We would save money on the plumbing by placing
these two rooms back to back. Take a minute now and see if you can change the
starting and ending positions for the bathroom, bedroom and closet so that the
bathroom is right next to the kitchen. You can use either the long or
shorthand properties here.

### grid-area

You now know how to position your grid items using row and column lines. But
there are other ways to position items and this is where things can get a
little confusing.

There is an even shorter shorthand for positioning grid items with start and
end lines. You can combine `grid-row-start` / `grid-column-start` / `grid-row-
end` / `grid-column-end` into one line using `grid-area`.

Our living room above can be written out like this:

    
    
    /* styles.css */
    
    #living-room {
      grid-area: 1 / 1 / 3 / 6;
    }
    

But `grid-area` can also refer to a few different things.

Instead of using the grid lines to position all the items in a grid, we can
create a visual layout of the grid in words. To do this we give each item on
the grid a name using `grid-area`.

So our living room can be written just like this:

    
    
    /* styles.css */
    
    #living-room {
      grid-area: living-room;
    }
    

We could do this to all of our grid items and give each room a `grid-area`
value as a name. Then we can map out the whole structure with the grid
container using `grid-template-areas`.

See the Pen [ grid-template-areas 1 | CSS
Grid](https://codepen.io/TheOdinProjectExamples/pen/dyVPYpv) by TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

Wow! You might want to open up the CodePen browser and make it large enough to
really read the `grid-template-areas` layout line by line. But this tool gives
us a completely different way to position items.

We can even use `.` to indicate empty cells. Say our apartment might be
getting a water heater and washer/dryer. We might not be sure of the exact
layout but we can visualize some space easily by removing more room in the
bathroom and kitchen:

See the Pen [ grid-template-areas 2 | CSS
Grid](https://codepen.io/TheOdinProjectExamples/pen/ZEXYbpg) by TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

So now you know two very different ways of using `grid-area` on a grid item.
You might even see the term “grid area” refer to a group of cells. For
example, all the grid cells of the living room together is a grid area. The
apartment analogy should help. A grid item can take up multiple cells forming
an area of the grid much like a room with four walls in an apartment.

### Wrapping up

As you go through the assignments you will come across more terminology like
`span` and `auto` when positioning grid items across tracks. There are also
properties to justify and align grid items similar to Flexbox. The best way to
learn all this terminology and how to position items is with lots of practice!

### Assignment

  * Read MDN’s [Line-based Placement with CSS Grid.](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Line-based_Placement_with_CSS_Grid)
  * Review [Part 4 on Grid Properties](https://css-tricks.com/snippets/css/complete-guide-grid/#grid-properties) from CSS-Tricks.

### Practice

> When doing the following exercises, please use all the documentation and
> resources you need to accomplish them. You are _not_ intended to have any of
> this stuff memorized at this point. Check the docs, use google, do what you
> need to do (besides checking the solutions) to get them done.

Go back to our [CSS exercises
repository](https://github.com/TheOdinProject/css-exercises) (you’ve done
these previously, but don’t forget that the instructions are in the README).
Do the first exercise in the ‘grid’ directory:

  1. grid-layout-1

### Knowledge check

This section contains questions for you to check your understanding of this
lesson. If you’re having trouble answering the questions below on your own,
review the material above to find the answer.

  * Explain the difference between a track and a line.
  * What is the smallest unit on a grid?
  * What kind of value do we give to the `grid-column-start` or `grid-column-end` properties?
  * Which property can we use to combine all the start and end values for a grid item?
  * Which grid container property can map out a visual structure of grid items?

### Additional resources

This section contains helpful links to other content. It isn’t required, so
consider it supplemental.

  * Play through levels 1 - 17 of [CSS Grid Garden](https://cssgridgarden.com/) to practice positioning items. Note the rest of the levels go beyond the scope of this lesson.
  * If you want to know more about using `grid-template-areas` check out this [Smashing Magazine article from Rachel Andrew.](https://www.smashingmagazine.com/understanding-css-grid-template-areas)
  * To learn more about alignment and centering items read through these MDN Docs on [Box Alignment in CSS Grid Layout.](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Box_Alignment_in_CSS_Grid_Layout)

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/intermediate_html_css/grid/positioning_grid_elements.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-intermediate-
html-and-css-positioning-grid-
elements&template=suggestion.yaml&title=Positioning+Grid+Elements%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/intermediate-html-and-css) [Sign in to track
progress](/sign_in) [ Next lessonGo to next lesson Next Lesson
](/lessons/node-path-intermediate-html-and-css-advanced-grid-properties)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

