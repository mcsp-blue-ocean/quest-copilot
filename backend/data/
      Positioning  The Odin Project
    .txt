Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![Intermediate HTML and CSS](/assets/badge-html-
css-91bc8d9c7ebb2e2f73eeb302c38a92d9ba6f182301dbd1868d7198fcc8376aeb.svg)
](/paths/full-stack-javascript/courses/intermediate-html-and-css)

#  Positioning

[

##  Intermediate HTML and CSS Course

](https://www.theodinproject.com/paths/full-stack-
javascript/courses/intermediate-html-and-css)

### Introduction

By now you have had quite a bit of practice moving elements around the screen
using things like margin, padding, and flexbox. These techniques have all
relied on CSS’s default “positioning-mode”. This default positioning-mode is
intuitive, and you’ll continue using it for almost all of your layout needs.
However, there are other methods at your disposal that can be very useful in
some situations.

### Learning outcomes

  * You’ll learn how to use absolute positioning.
  * You’ll learn how to use fixed positioning.
  * You’ll learn how to use sticky positioning.
  * You’ll know the difference between each property and how to combine them.

### Static and relative positioning

The default positioning mode that you’ve gotten used to is `position: static`.
The difference between static and relative is fairly simple. Static is the
default position of every element, and properties `top`, `right`, `bottom`,
and `left` do not affect the position of the element. Relative on the other
hand is pretty much the same as static, but properties `top`, `right...(etc.)`
displace the element relative to its normal position in the flow of the
document.

### Absolute positioning

`position: absolute` allows you to position something at an exact point on the
screen without disturbing the other elements around it. More specifically,
using absolute positioning on an element will remove that element from the
normal document flow while being positioned relative to an ancestor element.
To put it in simple terms: elements that are removed from the normal flow of
the document don’t affect other elements and are also not affected by other
elements. Using absolute positioning allows you to position elements anywhere
on the screen using `top`, `right`, `bottom`, and `left` properties. This
property is really useful when you want to position something at an exact
point on the screen, without disturbing any of the other elements. A couple of
good use cases for absolute positioning are:

  * modals
  * image with a caption on it
  * icons on top of other elements

In the following example, we are using absolute positioning to display text
over an image.

See the Pen [ Absolute Position | CSS
Positioning](https://codepen.io/TheOdinProjectExamples/pen/poWyWeJ) by
TheOdinProject
([@TheOdinProjectExamples](https://codepen.io/TheOdinProjectExamples)) on
[CodePen](https://codepen.io).

Disclaimer: absolute positioning has very specific use cases and if possible,
using flexbox or grid should be prioritized. Absolute positioning shouldn’t be
used to do entire page layouts.

### Fixed positioning

Fixed elements are also removed from the normal flow of the document and are
positioned relative to the `viewport`. You basically use `top`, `right`,
`bottom`, and `left` properties to position it, and it will stay there as the
user scrolls. This is especially useful for things like navigation bars and
floating chat buttons.

### Sticky positioning

Sticky elements will act like normal elements until you scroll past them, then
they start behaving like fixed elements. They are also not taken out of the
normal flow of the document. It might sound confusing, but checking out the
behavior of [this](https://codepen.io/theanam/pen/MPLBYy) example might clear
things up for you. It’s useful for things like section-headings. Remember
being able to still see what category you’re looking at while scrolling
through a shop? This is how it’s done!

### Assignment

  1. [This](https://www.youtube.com/watch?v=jx5jmI0UlXU) video is fast-paced but provides a good visual representation of different positioning behaviors. Go ahead and watch it.
  2. [This MDN article](https://developer.mozilla.org/en-US/docs/Web/CSS/position) covers all of the conceptual details about positioning.
  3. [This CSS Tricks](https://css-tricks.com/absolute-relative-fixed-positioining-how-do-they-differ/) page should give you a different insight on the topic. You should read it as well.
  4. Finally, [this article](https://www.kevinpowell.co/article/positition-fixed-vs-sticky/) discusses the difference between fixed and sticky positioning, it’s a great read to understand the difference better.

### Knowledge check

This section contains questions for you to check your understanding of this
lesson. If you’re having trouble answering the questions below on your own,
review the material above to find the answer.

  * What is the difference between static and relative positioning?
  * What is absolute positioning useful for?
  * [What is the difference between fixed and sticky positioning?](https://www.kevinpowell.co/article/positition-fixed-vs-sticky/)

### Additional resources

This section contains helpful links to related content. It isn’t required, so
consider it supplemental.

  * [Understand the CSS Position Property With Practical Examples](https://www.makeuseof.com/css-position-property-practical-examples/) provides some different CSS methods for positioning elements.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/intermediate_html_css/intermediate_css_concepts/positioning.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fnode-path-intermediate-
html-and-css-
positioning&template=suggestion.yaml&title=Positioning%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/intermediate-html-and-css) [Sign in to track
progress](/sign_in) [ Next lessonGo to next lesson Next Lesson
](/lessons/node-path-intermediate-html-and-css-css-functions)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

