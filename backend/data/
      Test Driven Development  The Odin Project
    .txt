Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![Ruby](/assets/badge-
ruby-d91c1849066ed424531394e9d693dd99aaef49bcee15a96f462a1ae54c359af0.svg)
](/paths/full-stack-ruby-on-rails/courses/ruby)

#  Test Driven Development

[

##  Ruby Course

](https://www.theodinproject.com/paths/full-stack-ruby-on-rails/courses/ruby)

### Introduction

Hopefully, you’ve been having fun developing in Ruby thus far. Perhaps one
thing you may **not** have enjoyed as much, though, is having to run your
script on the command line, running through each step manually, only to find
that it doesn’t return what you expected. And then comes the part that’s even
_more_ fun: tugging at your hair a bit, changing a few variables, and running
your script all over again, **hoping** that the results are correct.

Folks, we’re here to tell you there _IS_ a better way. Hoping is for that exam
you didn’t study for and took by the seat of your pants. **Knowing** is test-
driven development.

### Learning outcomes

_Look through these now and use them to guide your learning. By the end of
this lesson, expect to:_

  * Understand what test-driven development (TDD) is, and why it’s important.
  * Understand the three stages of a TDD cycle.

### What is test-driven development?

[Test-Driven Development (TDD)](https://en.wikipedia.org/wiki/Test-
driven_development) is a process and technique of software development that
relies on the repetition of a very short and specific development cycle. In
each cycle, requirements (i.e., what you want your code to do) are turned into
specific test cases first. These requirements could be anything from an entire
feature that requires end-to-end (E2E) testing, such as tests that cover a
user logging into your website successfully AND unsuccessfully, to a new Ruby
class you’ve devised, for which unit tests might suffice. Either way, the test
suite for these requirements fail initially, since actual code hasn’t been
written yet.

Once the code is written and passes our test suite, you can move onto
refactoring. As you might have guessed, running the test suite against the
changes we make to our features or units enables us to refactor _while_ making
sure everything still works.

Colloquially, this process is often referred to as the “ **red-green-
refactor** ” cycle. That’s all it is, in a nutshell: automated tests **drive**
the design of software. You don’t need to know how the entire architecture of
your sweet, new, industry-breaking application will work. Your application
only has to be broken down, step-by-step, until small units are identified and
covered by tests.

### Why is it important?

Even if TDD intuitively seems like good practice, its utility is hotly debated
even today.

No one is saying that tests aren’t useful. Testing at [all
levels](https://thoughtbot.com/blog/rails-test-types-and-the-testing-pyramid)
is _crucial_. Testing ensures that your application is working as intended.
More importantly, and perhaps less obviously, testing ensures developer
confidence when it comes time to change existing code. Adding new features and
dependencies increases the overall instability of your application, and a
single misstep can have a cascading, crashing effect in faraway, unintended
locations. Testing confirms that what you add works with what you already
have. In a sense, it provides a safety net that leaves your application more
open to change, and gives it room to grow and evolve as painlessly as
possible.

The real question is whether or not tests should _drive_ development, or
whether or not it’s important for them to come _first_. Many developers write
tests after they’ve written their code. There is definitely a longer list of
pros than cons for having tests in general, no one will disagree with that. So
should we test first?

As usual, it depends. Still, here are some reasons we think it might be
important for you to implement TDD:

  1. **Practice**. Many employers look for developers who have experience or interest in testing. Sure, you can write tests later, but will you really? Test first to make sure you get exposure as soon as possible.
  2. **Effectiveness**. Writing tests before code is like stretching before a workout. It’s not required, but your workout could suffer. Writing tests first ensures that the code that comes after has clearer design, purpose, and quality.
  3. **Efficiency**. You’ll save time in the long run by not having to re-run entire applications just to make sure little parts work.

### Assignment

  1. Read up on [9 Benefits of Test-Driven Development](https://www.madetech.com/blog/9-benefits-of-test-driven-development) for additional insight on this practice. Note that many of these points are not specific to TDD, but are also applicable to testing in general.
  2. For a more rounded take, consider DHH’s [“TDD is Dead. Long Live Testing”](https://dhh.dk/2014/tdd-is-dead-long-live-testing.html), which sparked controversial conversations on what TDD is, what it has become, and what it should be.

### Additional resources

This section contains helpful links to other content. It isn’t required, so
consider it supplemental.

  * [This video](https://www.youtube.com/watch?v=PCEHRFHKZSk) that provides counter arguments for DHH’s [“TDD is Dead. Long Live Testing”](https://dhh.dk/2014/tdd-is-dead-long-live-testing.html)
  * [This series of talks](https://martinfowler.com/articles/is-tdd-dead/) that provides an even more rounded take on TDD.

### Knowledge check

This section contains questions for you to check your understanding of this
lesson. If you’re having trouble answering the questions below on your own,
review the material above to find the answer.

  * What is the “red-green-refactor” cycle?
  * [What is the difference between unit and integration tests?](https://thoughtbot.com/blog/rails-test-types-and-the-testing-pyramid)
  * [How does TDD help in code refactoring?](https://www.madetech.com/blog/9-benefits-of-test-driven-development)

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/ruby/testing_ruby_with_rspec/test_driven_development.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fruby-test-driven-
development&template=suggestion.yaml&title=Test+Driven+Development%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-ruby-on-
rails/courses/ruby) [Sign in to track progress](/sign_in) [ Next lessonGo to
next lesson Next Lesson ](/lessons/ruby-introduction-to-rspec)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

