Close sidebar

[ Odin Logo ](/)

[ Home icon Home ](/) [ All Paths icon All Paths
](https://www.theodinproject.com/paths) [ About icon About ](/about) [ Support
Us icon Support Us ](/support_us) [ Community icon Community
](https://discord.gg/fbFCkYabZB)

* * *

[ Get started icon Get started ](/sign_up) [ theme icon Light mode
](/themes?theme=dark) [ Sign in icon Sign in ](/sign_in)

[ ![Odin Logo](/assets/icons/odin-
icon-a34029cd84a741be4da27758dafd7d7ac3729021adea3e0701e310d91e5c1d04.svg)
](/) [ Odin Logo ](/)

[All Paths](https://www.theodinproject.com/paths) [About](/about)
[Community](https://discord.gg/fbFCkYabZB) [Support us](/support_us) [Sign
in](/sign_in) [ theme icon ](/themes?theme=dark) [Get Started](/sign_up)

Open mobile menu Open mobile menu button

[ ![JavaScript](/assets/badge-
javascript-626af7075a7914bc4f30bd941268ed883785c3fb29b3e9d023eb5ab6450353bb.svg)
](/paths/full-stack-javascript/courses/javascript)

#  Common Data Structures and Algorithms

[

##  JavaScript Course

](https://www.theodinproject.com/paths/full-stack-
javascript/courses/javascript)

### Introduction

The basic idea of a **data structure** is to store data in a way that meets
the needs of your particular application. You might be inclined to store a
particular kind of data in one giant array, but it would be rather time
consuming to locate a specific value if you had a significant number and depth
of items. So you need to look to other options.

Depending on the application, there are a batch of other basic data structures
available to help you out. The differences between them typically have to do
with trade-offs between how long it takes to first populate the structure, how
long it takes to add or find elements, and how large the structure is in
memory.

We’ll save the specifics of data structures for more computer-science-oriented
courses, but this introduction should again expand your toolbox slightly so
you can identify and solve certain problems where plain old Arrays, Hashes and
Sets don’t quite cut it. New structures and strategies will be particularly
relevant, for instance, when you’re trying to search through a large batch of
data for a particular value or plan out a strategy several moves in advance.

You’ve already had a brief introduction to **algorithms** over some of the
other lessons and you even got to write your own Merge Sort algorithm in the
last project. You’ll find that sorting algorithms are quite common. Another
major area for algorithms is in search, where milliseconds count. When you’re
searching through enormous troves of data, the quality of your search
algorithm is incredibly important. Traversing a data tree looking for a
particular element is a related problem that’s common in data intensive
applications.

Luckily for you, these complex algorithmic problems have all been solved many
times in the past. Understanding _how_ they are solved will give you some
great tools to apply to other (similar) problems on your own. Algorithms are
really just ways of solving problems systematically. In this brief
introduction, we’ll focus on a couple of algorithms that you may run into when
coding on your own – breadth-first-search and depth-first-search.

### Lesson overview

This section contains a general overview of topics that you will learn in this
lesson.

  * What is a data structure?
  * What are stacks and queues?
  * What’s the best way to implement stacks and queues in Javascript (hint: think simple)?
  * Why bother having many different search algorithms?
  * What are breadth-first-search (BFS) and depth-first-search (DFS)?
  * What situations would you want to use BFS?
  * What situations would you want to use DFS instead?

### Assignment

  1. Glance over the [Wikipedia entry on Data Structures](http://en.wikipedia.org/wiki/Data_structure) for a high level overview of things.
  2. Learn about basic algorithms from Coursera’s Algorithms course in [this video](http://www.youtube.com/watch?v=u2TwK3fED8A). The first 10 minutes are really the meat of the introduction to algorithms, the rest gets more mathematical (if you’re so inclined).
  3. Read [What is an Algorithm and How Does it Make You a Better Programmer](http://blog.thefirehoseproject.com/posts/what-is-an-algorithm/) for another basic look at what algorithms are.
  4. Learn about how binary search works by watching [this video](https://www.youtube.com/watch?v=T98PIp4omUA) from Harvard’s CS50 on YouTube.
  5. Now, we’re going to focus on learning about binary search trees. Start by watching [this video](https://www.youtube.com/watch?v=FvdPo8PBQtc) to learn how a binary search tree is constructed from an unordered array.
  6. Next, learn about the principles of queues and stacks, which are concepts used in breadth-first search and depth-first search, respectively, by watching [this video](https://www.youtube.com/watch?v=6QS_Cup1YoI).
  7. Finally, learn about breadth-first search and depth-first search of binary search trees from this series of videos on YouTube: 
    * [Binary tree traversal](https://www.youtube.com/watch?v=9RHO6jU--GU)
    * [Breadth-first traversal](https://www.youtube.com/watch?v=86g8jAQug04)
    * [Depth-first traversal](https://www.youtube.com/watch?v=gm8DUJJhmY4)

### Knowledge check

This section contains questions for you to check your understanding of this
lesson on your own. If you’re having trouble answering a question, click it
and review the material it links to.

  * [What is the difference between a stack and a queue?](https://www.youtube.com/watch?v=6QS_Cup1YoI)
  * [What are the enqueue and dequeue properties?](http://blog.thefirehoseproject.com/posts/what-is-an-algorithm/)
  * [What is a linked list? What is a node?](https://en.wikipedia.org/wiki/Data_structure#Examples)
  * [What type of algorithm would you use to perform a binary search?](https://youtu.be/T98PIp4omUA?t=20)
  * [What abstract data type would you use to defer/store nodes in a breadth-first tree traversal?](https://youtu.be/86g8jAQug04?t=103)
  * [What abstract data type would you use to defer/store nodes in a depth-first tree traversal?](https://youtu.be/gm8DUJJhmY4?t=499)

### Additional resources

This section contains helpful links to other content. It isn’t required, so
consider it supplemental.

  * [Khan Academy’s great Algorithms Course](https://www.khanacademy.org/computing/computer-science/algorithms)
  * [Stanford’s Coursera 4-Part Algorithm Course](https://www.coursera.org/specializations/algorithms)
  * [Visualizing Algorithms from Mike Bostock](http://bost.ocks.org/mike/algorithms/)
  * [Another free course on algorithms by Udacity](https://www.udacity.com/course/intro-to-algorithms--cs215)
  * [A more detailed video on stacks and queues](https://www.youtube.com/watch?v=idrrIMXXeHM)
  * [An article](https://web.archive.org/web/20221207000421/https://www.crondose.com/2016/06/create-a-binary-search-tree-array) that discusses how to construct a binary search tree from an unordered array.
  * [A stack overflow discussion](https://stackoverflow.com/questions/3332947/when-is-it-practical-to-use-depth-first-search-dfs-vs-breadth-first-search-bf) on the relative strengths of BFS and DFS.

[ Improve on GitHub Github logo icon Improve on GitHub
](https://github.com/TheOdinProject/curriculum/edit/main/javascript/computer_science/common_data_structures_algorithms.md)
[ Report an issueReport icon Report an issue
](https://github.com/TheOdinProject/curriculum/issues/new?labels=Status%3A+Needs+Triage&lesson-
link=https%3A%2F%2Fwww.theodinproject.com%2Flessons%2Fjavascript-common-data-
structures-and-
algorithms&template=suggestion.yaml&title=Common+Data+Structures+and+Algorithms%3A+%3CShort+description+of+your+suggestion%3E)

#### Lesson contents

[ View courseGo to course page View Course ](/paths/full-stack-
javascript/courses/javascript) [Sign in to track progress](/sign_in) [ Next
lessonGo to next lesson Next Lesson ](/lessons/javascript-linked-lists)

## Footer

# Support us!

## The Odin Project is funded by the community. Join us in empowering learners
around the globe by supporting The Odin Project!

[Learn more](/support_us) [ Donate now
](https://opencollective.com/theodinproject/donate?amount=5)

[ Odin Logo ](/)

High quality coding education maintained by an open source community.

[ GitHub GitHub GitHub logo ](https://github.com/TheOdinProject) [ Discord
Discord Discord logo ](https://discord.gg/fbFCkYabZB) [ Facebook Facebook
Facebook logo ](https://www.facebook.com/theodinproject/) [ Twitter Twitter
Twitter logo ](https://twitter.com/TheOdinProject)

### About us

  * [About](/about)
  * [Team](/team)
  * [Blog](/blog)
  * [Success Stories](/success_stories)

### Support

  * [FAQ](/faq)
  * [Contribute](/contributing)
  * [Contact us](/about#contact-us)

### Guides

  * [Community guides](/guides/community)
  * [Installation guides](/guides/installations)

### Legal

  * [Terms](/terms_of_use)
  * [Privacy](/privacy-policy)

(C) 2023 The Odin Project. All rights reserved.

